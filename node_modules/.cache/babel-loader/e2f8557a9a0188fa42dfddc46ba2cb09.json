{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\";\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeMirrorEditor = /*#__PURE__*/forwardRef(_c = (props, ref) => {\n  // const [editorText, changeEditorText] = useState(\"test2\")\n  const editor = /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: \"test\",\n    options: {\n      theme: 'default',\n      keyMap: 'sublime',\n      mode: 'jsx',\n      lineNumbers: true,\n      tabSize: 2,\n      styleActiveLine: true,\n      matchBrackets: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 20\n  }, this); // useImperativeHandle(ref, () => ({\n  //     updateEditorText() {\n  //         changeEditorText(\"test\")\n  //         console.log(editorText)\n  //     }\n  // }))\n\n\n  return editor;\n});\n_c2 = CodeMirrorEditor;\nexport default CodeMirrorEditor; // export default class CodeMirrorEditor extends React.Component {\n//     state = {\n//         loading: true,\n//         editorText: null\n//     }\n//     render() {\n//         const editor = <CodeMirror value={this.state.editorText} options={{ \n//                             theme: 'default', \n//                             keyMap: 'sublime', \n//                             mode: 'jsx',\n//                             lineNumbers: true,\n//                             tabSize: 2,\n//                             styleActiveLine: true,\n//                             matchBrackets: true\n//                         }}/>\n//         useImperativeHandle(ref, () => ({\n//             updateEditorText() {\n//                 // changeEditorText(\"test\")\n//             }\n//         }))\n//         return(\n//             editor\n//         )\n//     }\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CodeMirrorEditor$forwardRef\");\n$RefreshReg$(_c2, \"CodeMirrorEditor\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","useState","forwardRef","useImperativeHandle","Controlled","CodeMirror","CodeMirrorEditor","props","ref","editor","theme","keyMap","mode","lineNumbers","tabSize","styleActiveLine","matchBrackets"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,SAAQC,UAAU,IAAIC,UAAtB,QAAuC,mBAAvC;AACA,OAAO,2BAAP;AACA,OAAO,8BAAP;;AAEA,MAAMC,gBAAgB,gBAAGJ,UAAU,MAAC,CAACK,KAAD,EAAQC,GAAR,KAAgB;AAChD;AAEA,QAAMC,MAAM,gBAAG,QAAC,UAAD;AAAY,IAAA,KAAK,EAAC,MAAlB;AAAyB,IAAA,OAAO,EAAE;AAC7BC,MAAAA,KAAK,EAAE,SADsB;AAE7BC,MAAAA,MAAM,EAAE,SAFqB;AAG7BC,MAAAA,IAAI,EAAE,KAHuB;AAI7BC,MAAAA,WAAW,EAAE,IAJgB;AAK7BC,MAAAA,OAAO,EAAE,CALoB;AAM7BC,MAAAA,eAAe,EAAE,IANY;AAO7BC,MAAAA,aAAa,EAAE;AAPc;AAAlC;AAAA;AAAA;AAAA;AAAA,UAAf,CAHgD,CAahD;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACIP,MADJ;AAGH,CAvBkC,CAAnC;MAAMH,gB;AAyBN,eAAeA,gBAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport {Controlled as CodeMirror} from \"react-codemirror2\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\n\nconst CodeMirrorEditor = forwardRef((props, ref) => {\n    // const [editorText, changeEditorText] = useState(\"test2\")\n\n    const editor = <CodeMirror value=\"test\" options={{ \n                        theme: 'default', \n                        keyMap: 'sublime', \n                        mode: 'jsx',\n                        lineNumbers: true,\n                        tabSize: 2,\n                        styleActiveLine: true,\n                        matchBrackets: true\n                    }}/>\n\n    // useImperativeHandle(ref, () => ({\n    //     updateEditorText() {\n    //         changeEditorText(\"test\")\n    //         console.log(editorText)\n    //     }\n    // }))\n\n    return(\n        editor\n    )\n})\n\nexport default CodeMirrorEditor\n\n// export default class CodeMirrorEditor extends React.Component {\n//     state = {\n//         loading: true,\n//         editorText: null\n//     }\n\n//     render() {\n//         const editor = <CodeMirror value={this.state.editorText} options={{ \n//                             theme: 'default', \n//                             keyMap: 'sublime', \n//                             mode: 'jsx',\n//                             lineNumbers: true,\n//                             tabSize: 2,\n//                             styleActiveLine: true,\n//                             matchBrackets: true\n//                         }}/>\n\n//         useImperativeHandle(ref, () => ({\n//             updateEditorText() {\n//                 // changeEditorText(\"test\")\n//             }\n//         }))\n\n//         return(\n//             editor\n//         )\n//     }\n// }"]},"metadata":{},"sourceType":"module"}