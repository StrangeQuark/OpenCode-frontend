{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Toolbar from './components/Toolbar';\nimport CodeMirrorEditor from './components/CodeMirrorEditor';\nimport './Question.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  _s();\n\n  //Grab the url search params\n  const query = window.location.search;\n  const urlParameters = new URLSearchParams(query);\n  const nameParameter = urlParameters.get('name'); //URL for making the API calls\n\n  var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter; //Reference to CodeMirrorEditor\n\n  const codeMirrorRef = useRef(); //Variable to hold the initial codemirror text\n\n  const [editorText, setEditorText] = useState(); //Fetch the data after the initial rendering of the page\n  //It is important to add the second argument, [], which runs this function only once after initial rendering\n  //Without the second argument, this function will run after each time the page is re-rendered\n\n  useEffect(() => {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n      setEditorText(json.editorStartingText);\n    }));\n  }, []); //Get correct answer from database\n\n  function executeCorrectAnswer() {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n    }));\n  } //Helper function to insert text into inner html of left toolbar\n\n\n  function insertProblemHTML(html) {\n    document.getElementById('question-toolbar').innerHTML = html;\n  } //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n\n\n  function codeToLogs() {\n    var text = editor.getValue();\n    console.log(text);\n    fetch('http://localhost:8080/api/java', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: text\n    }).then(response => response.text().then(function (text) {\n      response_text_area.value = text;\n    }));\n  } //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n  // function runTests() {\n  //   fetch(urlString).then(response => response.json().then(function(json) {\n  //       var text = editor.getValue()\n  //       var answer = json.correctAnswer\n  //       var tests = json.testFileText\n  //       var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer\n  //       fetch('http://localhost:8080/api/java', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: allClasses\n  //       }).then(response => response.text().then(\n  //         function (text) {\n  //           run_tests_text_area.value = text\n  //         }\n  //       ))\n  //       }));\n  // }\n  //Change colors of components based on which theme is selected\n\n\n  function changeTheme(sel) {\n    var toolbar = document.getElementById('editor-toolbar');\n    var topContainer = document.getElementById('top-container');\n    var compileButton = document.getElementById('compile-button');\n    var runTestsButton = document.getElementById('run-tests-button');\n    var themeSelect = document.getElementById('themes');\n    var languageSelect = document.getElementById('language');\n    var selection = sel.options[sel.selectedIndex].value;\n\n    if (selection == 'default') {\n      codeMirrorRef.current.updateEditorTheme('default');\n      toolbar.style.backgroundColor = \"#ffffff\";\n      compileButton.style.backgroundColor = \"#ffffff\";\n      compileButton.style.color = \"#000000\";\n      topContainer.style.backgroundColor = \"#ffffff\";\n      topContainer.style.color = \"#000000\";\n      runTestsButton.style.backgroundColor = \"#ffffff\";\n      runTestsButton.style.color = \"#000000\";\n      themeSelect.style.backgroundColor = \"#ffffff\";\n      themeSelect.style.color = \"#000000\";\n      languageSelect.style.backgroundColor = \"#ffffff\";\n      languageSelect.style.color = \"#000000\";\n    } else if (selection == 'darcula') {\n      codeMirrorRef.current.updateEditorTheme('darcula');\n      toolbar.style.backgroundColor = \"#2b2b2b\";\n      compileButton.style.backgroundColor = \"#2b2b2b\";\n      compileButton.style.color = \"#a9b7c6\";\n      topContainer.style.backgroundColor = \"#2b2b2b\";\n      topContainer.style.color = \"#a9b7c6\";\n      runTestsButton.style.backgroundColor = \"#2b2b2b\";\n      runTestsButton.style.color = \"#a9b7c6\";\n      themeSelect.style.backgroundColor = \"#2b2b2b\";\n      themeSelect.style.color = \"#a9b7c6\";\n      languageSelect.style.backgroundColor = \"#2b2b2b\";\n      languageSelect.style.color = \"#a9b7c6\";\n    }\n  }\n\n  function changeLanguage(sel) {\n    var selection = sel.options[sel.selectedIndex].value;\n    codeMirrorRef.current.updateEditorMode(selection);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"top-container\",\n      className: \"top-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"question-toolbar\",\n        className: \"question-toolbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"editor-toolbar\",\n          className: \"editor-toolbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"run-tests-button\",\n            children: \"Execute tests\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"compile-button\",\n            onClick: codeToLogs,\n            children: \"Compile and Run\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"themes\",\n            id: \"themes\",\n            onChange: e => changeTheme(e.target),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"default\",\n              children: \"Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"darcula\",\n              children: \"Darcula\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"language\",\n            id: \"language\",\n            onChange: e => changeLanguage(e.target),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"text/x-java\",\n              children: \"Java\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"javascript\",\n              children: \"Javascript\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"jsx\",\n              children: \"JSX\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"rust\",\n              children: \"Rust\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 23\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), editorText && /*#__PURE__*/_jsxDEV(CodeMirrorEditor, {\n          ref: codeMirrorRef,\n          code: editorText,\n          theme: 'default',\n          mode: 'javascript'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"response_div\",\n      className: \"bottom-toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"run_tests_text_area\",\n        id: \"run_tests_text_area\",\n        readOnly: true,\n        className: \"tests-text-area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"response_text_area\",\n        id: \"response_text_area\",\n        readOnly: \"true\",\n        className: \"response-text-area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Question, \"f0X1iCHgICKTz5YbgIIg1aiUxgU=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/Question.js"],"names":["React","useEffect","useRef","useState","Toolbar","CodeMirrorEditor","Question","query","window","location","search","urlParameters","URLSearchParams","nameParameter","get","urlString","codeMirrorRef","editorText","setEditorText","fetch","then","response","json","insertProblemHTML","questionHTML","editorStartingText","executeCorrectAnswer","html","document","getElementById","innerHTML","codeToLogs","text","editor","getValue","console","log","method","headers","body","response_text_area","value","changeTheme","sel","toolbar","topContainer","compileButton","runTestsButton","themeSelect","languageSelect","selection","options","selectedIndex","current","updateEditorTheme","style","backgroundColor","color","changeLanguage","updateEditorMode","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Toolbar from './components/Toolbar'\nimport CodeMirrorEditor from './components/CodeMirrorEditor'\nimport './Question.css'\n\nfunction Question() {\n    //Grab the url search params\n    const query = window.location.search\n    const urlParameters = new URLSearchParams(query);\n    const nameParameter = urlParameters.get('name')\n\n    //URL for making the API calls\n    var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter\n\n    //Reference to CodeMirrorEditor\n    const codeMirrorRef = useRef()\n\n    //Variable to hold the initial codemirror text\n    const [editorText, setEditorText] = useState()\n\n    //Fetch the data after the initial rendering of the page\n    //It is important to add the second argument, [], which runs this function only once after initial rendering\n    //Without the second argument, this function will run after each time the page is re-rendered\n    useEffect(() => {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n          setEditorText(json.editorStartingText)\n        }));\n    }, [])\n\n\n    //Get correct answer from database\n    function executeCorrectAnswer() {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n        }));\n    }\n\n\n    //Helper function to insert text into inner html of left toolbar\n    function insertProblemHTML(html) {\n      document.getElementById('question-toolbar').innerHTML = html\n    }\n\n\n    //Submit the text inside the CodeMirror editor to the API for compilation,\n    //and get the cmd line output and error output and display them in the\n    //bottom panel of the page\n    function codeToLogs() {\n      var text = editor.getValue()\n      console.log(text)\n\n      fetch('http://localhost:8080/api/java', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: text\n      }).then(response => response.text().then(\n        function (text) {\n          response_text_area.value = text\n        }\n      ))\n    }\n\n\n    //Submit the text inside the CodeMirror editor to the API for compilation,\n    //and get the cmd line output and error output and display them in the\n    //bottom panel of the page\n    // function runTests() {\n    //   fetch(urlString).then(response => response.json().then(function(json) {\n    //       var text = editor.getValue()\n    //       var answer = json.correctAnswer\n    //       var tests = json.testFileText\n\n    //       var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer\n\n    //       fetch('http://localhost:8080/api/java', {\n    //         method: 'POST',\n    //         headers: {\n    //           'Content-Type': 'application/json'\n    //         },\n    //         body: allClasses\n    //       }).then(response => response.text().then(\n    //         function (text) {\n    //           run_tests_text_area.value = text\n    //         }\n    //       ))\n    //       }));\n    // }\n\n\n    //Change colors of components based on which theme is selected\n    function changeTheme(sel) {\n      var toolbar = document.getElementById('editor-toolbar')\n      var topContainer = document.getElementById('top-container')\n      var compileButton = document.getElementById('compile-button')\n      var runTestsButton = document.getElementById('run-tests-button')\n      var themeSelect = document.getElementById('themes')\n      var languageSelect = document.getElementById('language')\n      var selection = sel.options[sel.selectedIndex].value\n\n\n      if (selection == 'default') {\n        codeMirrorRef.current.updateEditorTheme('default')\n\n        toolbar.style.backgroundColor = \"#ffffff\"\n\n        compileButton.style.backgroundColor = \"#ffffff\"\n        compileButton.style.color = \"#000000\"\n\n        topContainer.style.backgroundColor = \"#ffffff\"\n        topContainer.style.color = \"#000000\"\n\n        runTestsButton.style.backgroundColor = \"#ffffff\"\n        runTestsButton.style.color = \"#000000\"\n\n        themeSelect.style.backgroundColor = \"#ffffff\"\n        themeSelect.style.color = \"#000000\"\n\n        languageSelect.style.backgroundColor = \"#ffffff\"\n        languageSelect.style.color = \"#000000\"\n      }\n      else if (selection == 'darcula') {\n        codeMirrorRef.current.updateEditorTheme('darcula')\n\n        toolbar.style.backgroundColor = \"#2b2b2b\"\n\n        compileButton.style.backgroundColor = \"#2b2b2b\"\n        compileButton.style.color = \"#a9b7c6\"\n\n        topContainer.style.backgroundColor = \"#2b2b2b\"\n        topContainer.style.color = \"#a9b7c6\"\n\n        runTestsButton.style.backgroundColor = \"#2b2b2b\"\n        runTestsButton.style.color = \"#a9b7c6\"\n\n        themeSelect.style.backgroundColor = \"#2b2b2b\"\n        themeSelect.style.color = \"#a9b7c6\"\n\n        languageSelect.style.backgroundColor = \"#2b2b2b\"\n        languageSelect.style.color = \"#a9b7c6\"\n      }\n    }\n\n    function changeLanguage(sel) {\n      var selection = sel.options[sel.selectedIndex].value\n\n      codeMirrorRef.current.updateEditorMode(selection)\n    }\n\n    return(\n        <>\n            <Toolbar />\n            <div id='top-container' className=\"top-container\">\n                <div id=\"question-toolbar\" className=\"question-toolbar\"></div>\n                <div className=\"editor-container\">\n                <div id=\"editor-toolbar\" className=\"editor-toolbar\">\n                    {/* <button id=\"run-tests-button\" onClick={runTests}> */}\n                    <button id=\"run-tests-button\">\n                    Execute tests\n                    </button>\n                    <button id=\"compile-button\" onClick={codeToLogs}>\n                    {/* <button id=\"compile-button\" onClick={() => {\n                      console.log(codeMirrorRef.current.getEditorText())\n                    }}> */}\n                    Compile and Run\n                    </button>\n                    {/* <label for=\"themes\">Theme:</label> */}\n                    <select name=\"themes\" id=\"themes\" onChange={e => changeTheme(e.target)}>\n                      <option value=\"default\">Default</option>\n                      <option value=\"darcula\">Darcula</option>\n                    </select>\n                    <select name=\"language\" id=\"language\" onChange={e => changeLanguage(e.target)}>\n                      <option value=\"text/x-java\">Java</option>\n                      <option value=\"javascript\">Javascript</option>\n                      <option value=\"jsx\">JSX</option>\n                      <option value=\"rust\">Rust</option>\n                    </select>\n                </div>\n                {/* This 'editorText &&' doesn't render this component until editorText is defined in the useEffect function */}\n                {editorText && <CodeMirrorEditor ref={codeMirrorRef} code={editorText} theme={'default'} mode={'javascript'}/>}\n                </div>\n            </div>\n            <div id=\"response_div\" className=\"bottom-toolbar\">\n                <textarea name=\"run_tests_text_area\" id=\"run_tests_text_area\" readOnly={true} className=\"tests-text-area\"></textarea>\n                <textarea name=\"response_text_area\" id=\"response_text_area\" readOnly=\"true\" className=\"response-text-area\"></textarea>\n            </div>\n        </>\n    )\n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}