{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class QuestionsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      questions: null\n    };\n    this.myRef = React.createRef;\n  }\n\n  // async componentDidMount() {\n  //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n  //     const response = await fetch(FETCH_URL)\n  //     const fetchedData = await response.json()\n  //     const data = []\n  //     for(let value of fetchedData) {\n  //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n  //         data.push(obj)\n  //     }\n  //     this.setState({questions: data, loading: false})\n  // }\n  render() {\n    //CodeMirror variable declarations\n    var codeMirror = window.CodeMirror;\n    var themes = window.themes;\n    var language = window.language; //Initialize Codemirror editor\n\n    var editor = codeMirror(this.myRef.current, {\n      lineNumbers: true,\n      tabSize: 2,\n      matchBrackets: true,\n      styleActiveLine: true\n    }); //Helper function to insert text into CodeMirror editor\n\n    function insertEditorStartingText(text) {\n      editor.getDoc().setValue(text);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.myRef,\n        id: this.myRef,\n        className: \"editor-div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","QuestionsList","Component","constructor","props","state","loading","questions","myRef","createRef","render","codeMirror","window","CodeMirror","themes","language","editor","current","lineNumbers","tabSize","matchBrackets","styleActiveLine","insertEditorStartingText","text","getDoc","setValue"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,eAAe,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AACvDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAKnBC,KALmB,GAKX;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,SAAS,EAAE;AAFP,KALW;AAEf,SAAKC,KAAL,GAAaR,KAAK,CAACS,SAAnB;AACH;;AAOD;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACL;AACJ,QAAIC,UAAU,GAAGC,MAAM,CAACC,UAAxB;AACA,QAAIC,MAAM,GAAGF,MAAM,CAACE,MAApB;AACA,QAAIC,QAAQ,GAAGH,MAAM,CAACG,QAAtB,CAJS,CAMT;;AACA,QAAIC,MAAM,GAAGL,UAAU,CAAC,KAAKH,KAAL,CAAWS,OAAZ,EAAqB;AACxCC,MAAAA,WAAW,EAAE,IAD2B;AAExCC,MAAAA,OAAO,EAAE,CAF+B;AAGxCC,MAAAA,aAAa,EAAE,IAHyB;AAIxCC,MAAAA,eAAe,EAAE;AAJuB,KAArB,CAAvB,CAPS,CAcT;;AACA,aAASC,wBAAT,CAAkCC,IAAlC,EAAwC;AACpCP,MAAAA,MAAM,CAACQ,MAAP,GAAgBC,QAAhB,CAAyBF,IAAzB;AACH;;AAGG,wBACI;AAAA,6BACI;AAAK,QAAA,GAAG,EAAE,KAAKf,KAAf;AAAsB,QAAA,EAAE,EAAE,KAAKA,KAA/B;AAAsC,QAAA,SAAS,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAKH;;AArDsD","sourcesContent":["import React from \"react\";\n\nexport default class QuestionsList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.myRef = React.createRef\n    }\n\n    state = {\n        loading: true,\n        questions: null\n    }\n\n    // async componentDidMount() {\n    //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n\n    //     const response = await fetch(FETCH_URL)\n\n    //     const fetchedData = await response.json()\n\n    //     const data = []\n\n    //     for(let value of fetchedData) {\n    //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n    //         data.push(obj)\n    //     }\n\n    //     this.setState({questions: data, loading: false})\n    // }\n\n    render() {\n        //CodeMirror variable declarations\n    var codeMirror = window.CodeMirror\n    var themes = window.themes\n    var language = window.language\n\n    //Initialize Codemirror editor\n    var editor = codeMirror(this.myRef.current, {\n        lineNumbers: true,\n        tabSize: 2,\n        matchBrackets: true,\n        styleActiveLine: true\n    });\n\n    //Helper function to insert text into CodeMirror editor\n    function insertEditorStartingText(text) {\n        editor.getDoc().setValue(text)\n    }\n\n    \n        return(\n            <>\n                <div ref={this.myRef} id={this.myRef} className=\"editor-div\"></div>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}