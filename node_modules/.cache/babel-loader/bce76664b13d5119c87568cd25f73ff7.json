{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\";\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css'; // const CodeMirrorEditor = forwardRef((props, ref) => {\n//     // const [editorText, changeEditorText] = useState(\"test2\")\n//     constructor() {\n//         super()\n//         this.state = {value: 'abc'}\n//     }\n//     const editor = <CodeMirror value={editorText} options={{ \n//                         theme: 'default', \n//                         keyMap: 'sublime', \n//                         mode: 'jsx',\n//                         lineNumbers: true,\n//                         tabSize: 2,\n//                         styleActiveLine: true,\n//                         matchBrackets: true\n//                     }}/>\n//     useImperativeHandle(ref, () => ({\n//         updateEditorText() {\n//             // changeEditorText(\"test\")\n//         }\n//     }))\n//     return(\n//         editor\n//     )\n// })\n// export default CodeMirrorEditor\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CodeMirrorEditor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      questions: null\n    };\n  }\n\n  // async componentDidMount() {\n  //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n  //     const response = await fetch(FETCH_URL)\n  //     const fetchedData = await response.json()\n  //     const data = []\n  //     for(let value of fetchedData) {\n  //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n  //         data.push(obj)\n  //     }\n  //     this.setState({questions: data, loading: false})\n  // }\n  render() {\n    const code = \"code\";\n\n    function setText(text) {\n      console.log(text);\n    }\n\n    return /*#__PURE__*/_jsxDEV(CodeMirror, {\n      value: code,\n      options: {\n        theme: 'default',\n        keyMap: 'sublime',\n        mode: 'jsx',\n        lineNumbers: true,\n        tabSize: 2,\n        styleActiveLine: true,\n        matchBrackets: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","useState","forwardRef","useImperativeHandle","CodeMirror","CodeMirrorEditor","Component","state","loading","questions","render","code","setText","text","console","log","theme","keyMap","mode","lineNumbers","tabSize","styleActiveLine","matchBrackets"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,2BAAP;AACA,OAAO,8BAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAEA,eAAe,MAAMC,gBAAN,SAA+BL,KAAK,CAACM,SAArC,CAA+C;AAAA;AAAA;AAAA,SAC1DC,KAD0D,GAClD;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,SAAS,EAAE;AAFP,KADkD;AAAA;;AAM1D;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAG,MAAb;;AAEA,aAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACnBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACH;;AAED,wBACG,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEF,IAAnB;AAAyB,MAAA,OAAO,EAAE;AAC9BK,QAAAA,KAAK,EAAE,SADuB;AAE9BC,QAAAA,MAAM,EAAE,SAFsB;AAG9BC,QAAAA,IAAI,EAAE,KAHwB;AAI9BC,QAAAA,WAAW,EAAE,IAJiB;AAK9BC,QAAAA,OAAO,EAAE,CALqB;AAM9BC,QAAAA,eAAe,EAAE,IANa;AAO9BC,QAAAA,aAAa,EAAE;AAPe;AAAlC;AAAA;AAAA;AAAA;AAAA,YADH;AAWH;;AAzCyD","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\n\n// const CodeMirrorEditor = forwardRef((props, ref) => {\n//     // const [editorText, changeEditorText] = useState(\"test2\")\n//     constructor() {\n//         super()\n//         this.state = {value: 'abc'}\n//     }\n\n//     const editor = <CodeMirror value={editorText} options={{ \n//                         theme: 'default', \n//                         keyMap: 'sublime', \n//                         mode: 'jsx',\n//                         lineNumbers: true,\n//                         tabSize: 2,\n//                         styleActiveLine: true,\n//                         matchBrackets: true\n//                     }}/>\n\n//     useImperativeHandle(ref, () => ({\n//         updateEditorText() {\n//             // changeEditorText(\"test\")\n//         }\n//     }))\n\n//     return(\n//         editor\n//     )\n// })\n\n// export default CodeMirrorEditor\n\nexport default class CodeMirrorEditor extends React.Component {\n    state = {\n        loading: true,\n        questions: null\n    }\n\n    // async componentDidMount() {\n    //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n\n    //     const response = await fetch(FETCH_URL)\n\n    //     const fetchedData = await response.json()\n\n    //     const data = []\n\n    //     for(let value of fetchedData) {\n    //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n    //         data.push(obj)\n    //     }\n\n    //     this.setState({questions: data, loading: false})\n    // }\n\n    render() {\n        const code = \"code\"\n\n        function setText(text) {\n            console.log(text)\n        }\n\n        return(\n           <CodeMirror value={code} options={{ \n               theme: 'default', \n               keyMap: 'sublime', \n               mode: 'jsx',\n               lineNumbers: true,\n               tabSize: 2,\n               styleActiveLine: true,\n               matchBrackets: true\n             }}/>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}