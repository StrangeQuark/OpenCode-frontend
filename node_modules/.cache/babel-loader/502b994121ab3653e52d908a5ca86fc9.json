{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\Question.js\";\nimport React from 'react';\nimport Toolbar from './components/Toolbar';\nimport CodeMirrorEditor from './components/CodeMirrorEditor';\nimport './Question.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  //Grab the url search params\n  const query = window.location.search;\n  const urlParameters = new URLSearchParams(query);\n  const nameParameter = urlParameters.get('name'); //CodeMirror variable declarations\n\n  const codeMirror = window.CodeMirror;\n  const themes = window.themes;\n  const language = window.language; //Grab the bottom panel of the screen\n\n  var response_text_area = document.getElementById('response_text_area'); //Grab the bottom panel of the screen\n\n  var run_tests_text_area = document.getElementById('run_tests_text_area'); //Initialize Codemirror editor\n\n  var editor = codeMirror(document.querySelector('#editor'), {\n    lineNumbers: true,\n    tabSize: 2,\n    matchBrackets: true,\n    styleActiveLine: true\n  });\n  var codeEditor = CodeMirrorEditor; //URL for making the API calls\n\n  var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter; //Insert questionHTML from database into left panel and\n  //insert editorStartingText from database into CodeMirror editor\n\n  function populateQuestionPanel(urlString) {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n      insertEditorStartingText(json.editorStartingText);\n    }));\n  } //Get correct answer from database\n\n\n  function executeCorrectAnswer(urlString) {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n    }));\n  }\n\n  populateQuestionPanel(urlString); //Helper function to insert text into inner html of left toolbar\n\n  function insertProblemHTML(html) {\n    document.getElementById('left-toolbar').innerHTML = html;\n  } //Helper function to insert text into CodeMirror editor\n\n\n  function insertEditorStartingText(text) {\n    editor.getDoc().setValue(text);\n  } //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n\n\n  function codeToLogs() {\n    var text = editor.getValue();\n    console.log(text);\n    fetch('http://localhost:8080/api/java', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: text\n    }).then(response => response.text().then(function (text) {\n      response_text_area.value = text;\n    }));\n  } //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n\n\n  function runTests() {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      var text = editor.getValue();\n      var answer = json.correctAnswer;\n      var tests = json.testFileText;\n      var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer;\n      fetch('http://localhost:8080/api/java', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: allClasses\n      }).then(response => response.text().then(function (text) {\n        run_tests_text_area.value = text;\n      }));\n    }));\n  } //Change colors of components based on which theme is selected\n\n\n  function changeTheme(sel) {\n    var toolbar = document.getElementById('editor-toolbar');\n    var compileButton = document.getElementById('compile-button');\n    var selection = sel.options[sel.selectedIndex].value;\n    editor.setOption(\"theme\", selection);\n    var elem = document.querySelector('.editor-toolbar *');\n    var style = getComputedStyle(elem);\n\n    if (selection == 'default') {\n      toolbar.style.backgroundColor = \"#ffffff\";\n      compileButton.style.backgroundColor = \"#ffffff\";\n      compileButton.style.color = \"#000000\";\n      themes.style.backgroundColor = \"#ffffff\";\n      themes.style.color = \"#000000\";\n      language.style.backgroundColor = \"#ffffff\";\n      language.style.color = \"#000000\";\n      style.borderColor = \"#ffffff\";\n    } else if (selection == 'darcula') {\n      toolbar.style.backgroundColor = \"#2b2b2b\";\n      compileButton.style.backgroundColor = \"#2b2b2b\";\n      compileButton.style.color = \"#a9b7c6\";\n      themes.style.backgroundColor = \"#2b2b2b\";\n      themes.style.color = \"#a9b7c6\";\n      language.style.backgroundColor = \"#2b2b2b\";\n      language.style.color = \"#a9b7c6\";\n      style.borderColor = \"#2b2b2b\";\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"left-toolbar\",\n        className: \"left-toolbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"editor-toolbar\",\n          className: \"editor-toolbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"run-tests-button\",\n            onClick: runTests,\n            children: \"Execute tests\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"compile-button\",\n            onClick: codeToLogs,\n            children: \"Compile and Run\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"themes\",\n            id: \"themes\",\n            onChange: e => changeTheme(e.target),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"default\",\n              children: \"Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"darcula\",\n              children: \"Darcula\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"language\",\n            id: \"language\",\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"java\",\n              children: \"Java\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"editor\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"response_div\",\n      className: \"bottom-toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"run_tests_text_area\",\n        id: \"run_tests_text_area\",\n        readOnly: true,\n        className: \"tests-text-area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"response_text_area\",\n        id: \"response_text_area\",\n        readOnly: \"true\",\n        className: \"response-text-area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/Question.js"],"names":["React","Toolbar","CodeMirrorEditor","Question","query","window","location","search","urlParameters","URLSearchParams","nameParameter","get","codeMirror","CodeMirror","themes","language","response_text_area","document","getElementById","run_tests_text_area","editor","querySelector","lineNumbers","tabSize","matchBrackets","styleActiveLine","codeEditor","urlString","populateQuestionPanel","fetch","then","response","json","insertProblemHTML","questionHTML","insertEditorStartingText","editorStartingText","executeCorrectAnswer","html","innerHTML","text","getDoc","setValue","codeToLogs","getValue","console","log","method","headers","body","value","runTests","answer","correctAnswer","tests","testFileText","allClasses","changeTheme","sel","toolbar","compileButton","selection","options","selectedIndex","setOption","elem","style","getComputedStyle","backgroundColor","color","borderColor","e","target"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Toolbar from './components/Toolbar'\nimport CodeMirrorEditor from './components/CodeMirrorEditor'\nimport './Question.css'\n\nfunction Question() {\n    //Grab the url search params\n    const query = window.location.search\n    const urlParameters = new URLSearchParams(query);\n    const nameParameter = urlParameters.get('name')\n\n    //CodeMirror variable declarations\n    const codeMirror = window.CodeMirror\n    const themes = window.themes\n    const language = window.language\n\n    //Grab the bottom panel of the screen\n    var response_text_area = document.getElementById('response_text_area')\n\n    //Grab the bottom panel of the screen\n    var run_tests_text_area = document.getElementById('run_tests_text_area')\n\n    //Initialize Codemirror editor\n    var editor = codeMirror(document.querySelector('#editor'), {\n      lineNumbers: true,\n      tabSize: 2,\n      matchBrackets: true,\n      styleActiveLine: true\n    });\n\n    var codeEditor = CodeMirrorEditor\n\n\n    //URL for making the API calls\n    var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter\n\n\n    //Insert questionHTML from database into left panel and\n    //insert editorStartingText from database into CodeMirror editor\n    function populateQuestionPanel(urlString) {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n          insertEditorStartingText(json.editorStartingText)\n        }));\n    }\n\n\n    //Get correct answer from database\n    function executeCorrectAnswer(urlString) {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n        }));\n    }\n    populateQuestionPanel(urlString)\n\n\n    //Helper function to insert text into inner html of left toolbar\n    function insertProblemHTML(html) {\n      document.getElementById('left-toolbar').innerHTML = html\n    }\n\n\n    //Helper function to insert text into CodeMirror editor\n    function insertEditorStartingText(text) {\n      editor.getDoc().setValue(text)\n    }\n\n\n    //Submit the text inside the CodeMirror editor to the API for compilation,\n    //and get the cmd line output and error output and display them in the\n    //bottom panel of the page\n    function codeToLogs() {\n      var text = editor.getValue()\n      console.log(text)\n\n      fetch('http://localhost:8080/api/java', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: text\n      }).then(response => response.text().then(\n        function (text) {\n          response_text_area.value = text\n        }\n      ))\n    }\n\n\n    //Submit the text inside the CodeMirror editor to the API for compilation,\n    //and get the cmd line output and error output and display them in the\n    //bottom panel of the page\n    function runTests() {\n      fetch(urlString).then(response => response.json().then(function(json) {\n          var text = editor.getValue()\n          var answer = json.correctAnswer\n          var tests = json.testFileText\n\n          var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer\n\n          fetch('http://localhost:8080/api/java', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: allClasses\n          }).then(response => response.text().then(\n            function (text) {\n              run_tests_text_area.value = text\n            }\n          ))\n          }));\n    }\n\n\n    //Change colors of components based on which theme is selected\n    function changeTheme(sel) {\n      var toolbar = document.getElementById('editor-toolbar')\n      var compileButton = document.getElementById('compile-button')\n      var selection = sel.options[sel.selectedIndex].value\n      editor.setOption(\"theme\", selection)\n\n      var elem = document.querySelector('.editor-toolbar *');\n      var style = getComputedStyle(elem);\n\n\n\n      if (selection == 'default') {\n        toolbar.style.backgroundColor = \"#ffffff\"\n\n        compileButton.style.backgroundColor = \"#ffffff\"\n        compileButton.style.color = \"#000000\"\n\n        themes.style.backgroundColor = \"#ffffff\"\n        themes.style.color = \"#000000\"\n\n        language.style.backgroundColor = \"#ffffff\"\n        language.style.color = \"#000000\"\n\n        style.borderColor = \"#ffffff\"\n      }\n      else if (selection == 'darcula') {\n        toolbar.style.backgroundColor = \"#2b2b2b\"\n\n        compileButton.style.backgroundColor = \"#2b2b2b\"\n        compileButton.style.color = \"#a9b7c6\"\n\n        themes.style.backgroundColor = \"#2b2b2b\"\n        themes.style.color = \"#a9b7c6\"\n\n        language.style.backgroundColor = \"#2b2b2b\"\n        language.style.color = \"#a9b7c6\"\n\n        style.borderColor = \"#2b2b2b\"\n      }\n    }\n\n    return(\n        <>\n            <Toolbar />\n            <div className=\"top-container\">\n                <div id=\"left-toolbar\" className=\"left-toolbar\"></div>\n                <div className=\"editor-container\">\n                <div id=\"editor-toolbar\" className=\"editor-toolbar\">\n                    <button id=\"run-tests-button\" onClick={runTests}>\n                    Execute tests\n                    </button>\n                    <button id=\"compile-button\" onClick={codeToLogs}>\n                    Compile and Run\n                    </button>\n                    {/* <label for=\"themes\">Theme:</label> */}\n                    <select name=\"themes\" id=\"themes\" onChange={e => changeTheme(e.target)}>\n                    <option value=\"default\">Default</option>\n                    <option value=\"darcula\">Darcula</option>\n                    </select>\n                    <select name=\"language\" id=\"language\">\n                    <option value=\"java\">Java</option>\n                    </select>\n                </div>\n                <editor/>\n                </div>\n            </div>\n            <div id=\"response_div\" className=\"bottom-toolbar\">\n                <textarea name=\"run_tests_text_area\" id=\"run_tests_text_area\" readOnly={true} className=\"tests-text-area\"></textarea>\n                <textarea name=\"response_text_area\" id=\"response_text_area\" readOnly=\"true\" className=\"response-text-area\"></textarea>\n            </div>\n        </>\n    )\n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}