{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\";\nimport React from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class QuestionsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      questions: null\n    };\n  }\n\n  // async componentDidMount() {\n  //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n  //     const response = await fetch(FETCH_URL)\n  //     const fetchedData = await response.json()\n  //     const data = []\n  //     for(let value of fetchedData) {\n  //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n  //         data.push(obj)\n  //     }\n  //     this.setState({questions: data, loading: false})\n  // }\n  render() {\n    const code = \"code\";\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(CodeMirror, {\n          id: \"editor\",\n          className: \"editor-div\",\n          value: code,\n          options: {\n            theme: 'monokai',\n            keyMap: 'sublime',\n            mode: 'jsx'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","CodeMirror","QuestionsList","Component","state","loading","questions","render","code","theme","keyMap","mode"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;;;AAEA,eAAe,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AAAA;AAAA;AAAA,SACvDC,KADuD,GAC/C;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,SAAS,EAAE;AAFP,KAD+C;AAAA;;AAMvD;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAG,MAAb;AACA,wBACI;AAAA,6BACI;AAAA,+BACI,QAAC,UAAD;AAAY,UAAA,EAAE,EAAE,QAAhB;AAA0B,UAAA,SAAS,EAAE,YAArC;AAAmD,UAAA,KAAK,EAAEA,IAA1D;AAAgE,UAAA,OAAO,EAAE;AAAEC,YAAAA,KAAK,EAAE,SAAT;AAAoBC,YAAAA,MAAM,EAAE,SAA5B;AAAuCC,YAAAA,IAAI,EAAE;AAA7C;AAAzE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAOH;;AAhCsD","sourcesContent":["import React from \"react\";\nimport CodeMirror from \"react-codemirror\";\n\nexport default class QuestionsList extends React.Component {\n    state = {\n        loading: true,\n        questions: null\n    }\n\n    // async componentDidMount() {\n    //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n\n    //     const response = await fetch(FETCH_URL)\n\n    //     const fetchedData = await response.json()\n\n    //     const data = []\n\n    //     for(let value of fetchedData) {\n    //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n    //         data.push(obj)\n    //     }\n\n    //     this.setState({questions: data, loading: false})\n    // }\n\n    render() {\n        const code = \"code\"\n        return(\n            <>\n                <div>\n                    <CodeMirror id={\"editor\"} className={\"editor-div\"} value={code} options={{ theme: 'monokai', keyMap: 'sublime', mode: 'jsx' }}/>\n                </div>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}