{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport Toolbar from './components/Toolbar';\nimport CodeMirrorEditor from './components/CodeMirrorEditor';\nimport './Question.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  _s();\n\n  //Grab the url search params\n  const query = window.location.search;\n  const urlParameters = new URLSearchParams(query);\n  const nameParameter = urlParameters.get('name'); //Grab the bottom panel of the screen\n\n  var response_text_area = document.getElementById('response_text_area'); //Grab the bottom panel of the screen\n\n  var run_tests_text_area = document.getElementById('run_tests_text_area'); //URL for making the API calls\n\n  var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter; //Reference to CodeMirrorEditor\n\n  const codeMirrorRef = useRef(); //Reference to CodeMirrorEditor\n\n  const executionPanelRef = useRef(); //Variable to hold the initial codemirror text\n\n  const [editorText, setEditorText] = useState(); //Fetch the data after the initial rendering of the page\n  //It is important to add the second argument, [], which runs this function only once after initial rendering\n  //Without the second argument, this function will run after each time the page is re-rendered\n\n  useEffect(() => {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n      setEditorText(json.editorStartingText);\n    }));\n  }, []); //Get correct answer from database\n\n  function executeCorrectAnswer() {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n    }));\n  } //Helper function to insert text into inner html of left toolbar\n\n\n  function insertProblemHTML(html) {\n    document.getElementById('question-toolbar').innerHTML = html;\n  } // //Submit the text inside the CodeMirror editor to the API for compilation,\n  // //and get the cmd line output and error output and display them in the\n  // //bottom panel of the page\n  // function codeToLogs() {\n  //   var text = codeMirrorRef.current.getEditorText()\n  //   console.log(text)\n  //   fetch('http://localhost:8080/api/java', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: text\n  //   }).then(response => response.text().then(\n  //     function (text) {\n  //       response_text_area.value = text\n  //     }\n  //   ))\n  // }\n  //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n\n\n  function runTests() {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      var text = codeMirrorRef.current.getEditorText();\n      var answer = json.correctAnswer;\n      var tests = json.testFileText;\n      var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer;\n      fetch('http://localhost:8080/api/java', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: allClasses\n      }).then(response => response.text().then(function (text) {\n        executionPanelRef.current.updateEditorText(text);\n      }));\n    }));\n  } //Change colors of components based on which theme is selected\n\n\n  function changeTheme(sel) {\n    var toolbar = document.getElementById('editor-toolbar');\n    var topContainer = document.getElementById('top-container'); // var compileButton = document.getElementById('compile-button')\n\n    var runTestsButton = document.getElementById('run-tests-button');\n    var themeSelect = document.getElementById('themes');\n    var languageSelect = document.getElementById('language');\n    var selection = sel.options[sel.selectedIndex].value;\n\n    if (selection == 'default') {\n      codeMirrorRef.current.updateEditorTheme('default');\n      executionPanelRef.current.updateEditorTheme('default');\n      toolbar.style.backgroundColor = \"#ffffff\"; // compileButton.style.backgroundColor = \"#ffffff\"\n      // compileButton.style.color = \"#000000\"\n\n      topContainer.style.backgroundColor = \"#ffffff\";\n      topContainer.style.color = \"#000000\";\n      runTestsButton.style.backgroundColor = \"#ffffff\";\n      runTestsButton.style.color = \"#000000\";\n      themeSelect.style.backgroundColor = \"#ffffff\";\n      themeSelect.style.color = \"#000000\";\n      languageSelect.style.backgroundColor = \"#ffffff\";\n      languageSelect.style.color = \"#000000\";\n    } else if (selection == 'darcula') {\n      codeMirrorRef.current.updateEditorTheme('darcula');\n      executionPanelRef.current.updateEditorTheme('darcula');\n      toolbar.style.backgroundColor = \"#2b2b2b\"; // compileButton.style.backgroundColor = \"#2b2b2b\"\n      // compileButton.style.color = \"#a9b7c6\"\n\n      topContainer.style.backgroundColor = \"#2b2b2b\";\n      topContainer.style.color = \"#a9b7c6\";\n      runTestsButton.style.backgroundColor = \"#2b2b2b\";\n      runTestsButton.style.color = \"#a9b7c6\";\n      themeSelect.style.backgroundColor = \"#2b2b2b\";\n      themeSelect.style.color = \"#a9b7c6\";\n      languageSelect.style.backgroundColor = \"#2b2b2b\";\n      languageSelect.style.color = \"#a9b7c6\";\n    }\n  }\n\n  function changeLanguage(sel) {\n    var selection = sel.options[sel.selectedIndex].value;\n    codeMirrorRef.current.updateEditorMode(selection);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"top-div\",\n      className: \"top-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"top-container\",\n        className: \"top-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"question-toolbar\",\n          className: \"question-toolbar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"editor-toolbar\",\n            className: \"editor-toolbar\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"run-tests-button\",\n              onClick: runTests,\n              children: \"Execute tests\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"themes\",\n              id: \"themes\",\n              onChange: e => changeTheme(e.target),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"default\",\n                children: \"Default\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"darcula\",\n                children: \"Darcula\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 184,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              name: \"language\",\n              id: \"language\",\n              onChange: e => changeLanguage(e.target),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"text/x-java\",\n                children: \"Java\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"javascript\",\n                children: \"Javascript\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"jsx\",\n                children: \"JSX\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"rust\",\n                children: \"Rust\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 19\n          }, this), editorText && /*#__PURE__*/_jsxDEV(CodeMirrorEditor, {\n            ref: codeMirrorRef,\n            code: editorText,\n            theme: 'default',\n            mode: 'javascript',\n            editable: true,\n            lineNumbers: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 32\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"response_div\",\n        className: \"bottom-toolbar\",\n        children: /*#__PURE__*/_jsxDEV(CodeMirrorEditor, {\n          className: \"CodeMirror-full-height\",\n          ref: executionPanelRef,\n          code: \"\",\n          theme: 'default',\n          mode: 'javascript',\n          editable: true,\n          lineNumbers: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Question, \"IOlL7ezszd85T9jiEqmXC8x8Ryk=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/Question.js"],"names":["React","useEffect","useRef","useState","Toolbar","CodeMirrorEditor","Question","query","window","location","search","urlParameters","URLSearchParams","nameParameter","get","response_text_area","document","getElementById","run_tests_text_area","urlString","codeMirrorRef","executionPanelRef","editorText","setEditorText","fetch","then","response","json","insertProblemHTML","questionHTML","editorStartingText","executeCorrectAnswer","html","innerHTML","runTests","text","current","getEditorText","answer","correctAnswer","tests","testFileText","allClasses","method","headers","body","updateEditorText","changeTheme","sel","toolbar","topContainer","runTestsButton","themeSelect","languageSelect","selection","options","selectedIndex","value","updateEditorTheme","style","backgroundColor","color","changeLanguage","updateEditorMode","e","target"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Toolbar from './components/Toolbar'\nimport CodeMirrorEditor from './components/CodeMirrorEditor'\nimport './Question.css'\n\nfunction Question() {\n    //Grab the url search params\n    const query = window.location.search\n    const urlParameters = new URLSearchParams(query);\n    const nameParameter = urlParameters.get('name')\n\n    //Grab the bottom panel of the screen\n    var response_text_area = document.getElementById('response_text_area')\n\n    //Grab the bottom panel of the screen\n    var run_tests_text_area = document.getElementById('run_tests_text_area')\n\n    //URL for making the API calls\n    var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter\n\n    //Reference to CodeMirrorEditor\n    const codeMirrorRef = useRef()\n\n    //Reference to CodeMirrorEditor\n    const executionPanelRef = useRef()\n\n    //Variable to hold the initial codemirror text\n    const [editorText, setEditorText] = useState()\n\n    //Fetch the data after the initial rendering of the page\n    //It is important to add the second argument, [], which runs this function only once after initial rendering\n    //Without the second argument, this function will run after each time the page is re-rendered\n    useEffect(() => {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n          setEditorText(json.editorStartingText)\n        }));\n    }, [])\n\n\n    //Get correct answer from database\n    function executeCorrectAnswer() {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n        }));\n    }\n\n\n    //Helper function to insert text into inner html of left toolbar\n    function insertProblemHTML(html) {\n      document.getElementById('question-toolbar').innerHTML = html\n    }\n\n\n    // //Submit the text inside the CodeMirror editor to the API for compilation,\n    // //and get the cmd line output and error output and display them in the\n    // //bottom panel of the page\n    // function codeToLogs() {\n    //   var text = codeMirrorRef.current.getEditorText()\n    //   console.log(text)\n\n    //   fetch('http://localhost:8080/api/java', {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     },\n    //     body: text\n    //   }).then(response => response.text().then(\n    //     function (text) {\n    //       response_text_area.value = text\n    //     }\n    //   ))\n    // }\n\n\n    //Submit the text inside the CodeMirror editor to the API for compilation,\n    //and get the cmd line output and error output and display them in the\n    //bottom panel of the page\n    function runTests() {\n      fetch(urlString).then(response => response.json().then(function(json) {\n          var text = codeMirrorRef.current.getEditorText()\n          var answer = json.correctAnswer\n          var tests = json.testFileText\n\n          var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer\n\n          fetch('http://localhost:8080/api/java', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: allClasses\n          }).then(response => response.text().then(\n            function (text) {\n              executionPanelRef.current.updateEditorText(text)\n            }\n          ))\n          }));\n    }\n\n\n    //Change colors of components based on which theme is selected\n    function changeTheme(sel) {\n      var toolbar = document.getElementById('editor-toolbar')\n      var topContainer = document.getElementById('top-container')\n      // var compileButton = document.getElementById('compile-button')\n      var runTestsButton = document.getElementById('run-tests-button')\n      var themeSelect = document.getElementById('themes')\n      var languageSelect = document.getElementById('language')\n      var selection = sel.options[sel.selectedIndex].value\n\n\n      if (selection == 'default') {\n        codeMirrorRef.current.updateEditorTheme('default')\n\n        executionPanelRef.current.updateEditorTheme('default')\n\n        toolbar.style.backgroundColor = \"#ffffff\"\n\n        // compileButton.style.backgroundColor = \"#ffffff\"\n        // compileButton.style.color = \"#000000\"\n\n        topContainer.style.backgroundColor = \"#ffffff\"\n        topContainer.style.color = \"#000000\"\n\n        runTestsButton.style.backgroundColor = \"#ffffff\"\n        runTestsButton.style.color = \"#000000\"\n\n        themeSelect.style.backgroundColor = \"#ffffff\"\n        themeSelect.style.color = \"#000000\"\n\n        languageSelect.style.backgroundColor = \"#ffffff\"\n        languageSelect.style.color = \"#000000\"\n      }\n      else if (selection == 'darcula') {\n        codeMirrorRef.current.updateEditorTheme('darcula')\n\n        executionPanelRef.current.updateEditorTheme('darcula')\n\n        toolbar.style.backgroundColor = \"#2b2b2b\"\n\n        // compileButton.style.backgroundColor = \"#2b2b2b\"\n        // compileButton.style.color = \"#a9b7c6\"\n\n        topContainer.style.backgroundColor = \"#2b2b2b\"\n        topContainer.style.color = \"#a9b7c6\"\n\n        runTestsButton.style.backgroundColor = \"#2b2b2b\"\n        runTestsButton.style.color = \"#a9b7c6\"\n\n        themeSelect.style.backgroundColor = \"#2b2b2b\"\n        themeSelect.style.color = \"#a9b7c6\"\n\n        languageSelect.style.backgroundColor = \"#2b2b2b\"\n        languageSelect.style.color = \"#a9b7c6\"\n      }\n    }\n\n    function changeLanguage(sel) {\n      var selection = sel.options[sel.selectedIndex].value\n\n      codeMirrorRef.current.updateEditorMode(selection)\n    }\n\n    return(\n        <>\n            <Toolbar />\n            <div id='top-div' className=\"top-div\">\n              <div id='top-container' className=\"top-container\">\n                <div id=\"question-toolbar\" className=\"question-toolbar\"></div>\n                <div className=\"editor-container\">\n                  <div id=\"editor-toolbar\" className=\"editor-toolbar\">\n\n                    <button id=\"run-tests-button\" onClick={runTests}>Execute tests</button>\n\n                    {/* <button id=\"compile-button\" onClick={codeToLogs}>Compile and Run</button> */}\n\n                    {/* <label for=\"themes\">Theme:</label> */}\n\n                    <select name=\"themes\" id=\"themes\" onChange={e => changeTheme(e.target)}>\n                      <option value=\"default\">Default</option>\n                      <option value=\"darcula\">Darcula</option>\n                    </select>\n\n                    <select name=\"language\" id=\"language\" onChange={e => changeLanguage(e.target)}>\n                      <option value=\"text/x-java\">Java</option>\n                      <option value=\"javascript\">Javascript</option>\n                      <option value=\"jsx\">JSX</option>\n                      <option value=\"rust\">Rust</option>\n                    </select>\n\n                  </div>\n                {/* This 'editorText &&' doesn't render this component until editorText is defined in the useEffect function */}\n                {editorText && <CodeMirrorEditor ref={codeMirrorRef} code={editorText} theme={'default'} mode={'javascript'} editable={true} lineNumbers={true}/>}\n                </div>\n              </div>\n              <div id=\"response_div\" className=\"bottom-toolbar\">\n                <CodeMirrorEditor className=\"CodeMirror-full-height\" ref={executionPanelRef} code={\"\"} theme={'default'} mode={'javascript'} editable={true} lineNumbers={false}/>\n                {/* <textarea name=\"run_tests_text_area\" id=\"run_tests_text_area\" readOnly={true} className=\"tests-text-area\"></textarea> */}\n                {/* <textarea name=\"response_text_area\" id=\"response_text_area\" readOnly=\"true\" className=\"response-text-area\"></textarea> */}\n              </div>\n            </div>\n        </>\n    )\n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}