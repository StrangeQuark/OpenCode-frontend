{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeMirrorEditor = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [editorText, changeEditorText] = useState(\"\");\n  useImperativeHandle(ref, () => ({\n    updateEditorText() {\n      changeEditorText(\"test\");\n      console.log('test');\n    }\n\n  }));\n  return /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: editorText,\n    options: {\n      theme: 'default',\n      keyMap: 'sublime',\n      mode: 'jsx',\n      lineNumbers: true,\n      tabSize: 2,\n      styleActiveLine: true,\n      matchBrackets: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}, \"dPNZy53iViErGpKGVCAK0dUo+9A=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = CodeMirrorEditor;\nexport default CodeMirrorEditor; // export default class QuestionsList extends React.Component {\n//     state = {\n//         loading: true,\n//         questions: null\n//     }\n//     // async componentDidMount() {\n//     //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n//     //     const response = await fetch(FETCH_URL)\n//     //     const fetchedData = await response.json()\n//     //     const data = []\n//     //     for(let value of fetchedData) {\n//     //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n//     //         data.push(obj)\n//     //     }\n//     //     this.setState({questions: data, loading: false})\n//     // }\n//     render() {\n//         const code = \"code\"\n//         function setText(text) {\n//             console.log(text)\n//         }\n//         return(\n//            <CodeMirror value={code} options={{ \n//                theme: 'default', \n//                keyMap: 'sublime', \n//                mode: 'jsx',\n//                lineNumbers: true,\n//                tabSize: 2,\n//                styleActiveLine: true,\n//                matchBrackets: true\n//              }}/>\n//         )\n//     }\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CodeMirrorEditor$forwardRef\");\n$RefreshReg$(_c2, \"CodeMirrorEditor\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","useState","forwardRef","useImperativeHandle","CodeMirror","CodeMirrorEditor","props","ref","editorText","changeEditorText","updateEditorText","console","log","theme","keyMap","mode","lineNumbers","tabSize","styleActiveLine","matchBrackets"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,2BAAP;AACA,OAAO,8BAAP;;AAEA,MAAMC,gBAAgB,gBAAGH,UAAU,SAAC,CAACI,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAChD,QAAM,CAACC,UAAD,EAAaC,gBAAb,IAAiCR,QAAQ,CAAC,EAAD,CAA/C;AAEAE,EAAAA,mBAAmB,CAACI,GAAD,EAAM,OAAO;AAC5BG,IAAAA,gBAAgB,GAAG;AACfD,MAAAA,gBAAgB,CAAC,MAAD,CAAhB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACH;;AAJ2B,GAAP,CAAN,CAAnB;AAOA,sBACI,QAAC,UAAD;AAAY,IAAA,KAAK,EAAEJ,UAAnB;AAA+B,IAAA,OAAO,EAAE;AACpCK,MAAAA,KAAK,EAAE,SAD6B;AAEpCC,MAAAA,MAAM,EAAE,SAF4B;AAGpCC,MAAAA,IAAI,EAAE,KAH8B;AAIpCC,MAAAA,WAAW,EAAE,IAJuB;AAKpCC,MAAAA,OAAO,EAAE,CAL2B;AAMpCC,MAAAA,eAAe,EAAE,IANmB;AAOpCC,MAAAA,aAAa,EAAE;AAPqB;AAAxC;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CArBkC;AAAA,UAG/BhB,mBAH+B;AAAA,GAAnC;MAAME,gB;AAuBN,eAAeA,gBAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\n\nconst CodeMirrorEditor = forwardRef((props, ref) => {\n    const [editorText, changeEditorText] = useState(\"\")\n\n    useImperativeHandle(ref, () => ({\n        updateEditorText() {\n            changeEditorText(\"test\")\n            console.log('test')\n        }\n    }))\n\n    return(\n        <CodeMirror value={editorText} options={{ \n            theme: 'default', \n            keyMap: 'sublime', \n            mode: 'jsx',\n            lineNumbers: true,\n            tabSize: 2,\n            styleActiveLine: true,\n            matchBrackets: true\n        }}/>\n    )\n})\n\nexport default CodeMirrorEditor\n\n// export default class QuestionsList extends React.Component {\n//     state = {\n//         loading: true,\n//         questions: null\n//     }\n\n//     // async componentDidMount() {\n//     //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n\n//     //     const response = await fetch(FETCH_URL)\n\n//     //     const fetchedData = await response.json()\n\n//     //     const data = []\n\n//     //     for(let value of fetchedData) {\n//     //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n//     //         data.push(obj)\n//     //     }\n\n//     //     this.setState({questions: data, loading: false})\n//     // }\n\n//     render() {\n//         const code = \"code\"\n\n//         function setText(text) {\n//             console.log(text)\n//         }\n\n//         return(\n//            <CodeMirror value={code} options={{ \n//                theme: 'default', \n//                keyMap: 'sublime', \n//                mode: 'jsx',\n//                lineNumbers: true,\n//                tabSize: 2,\n//                styleActiveLine: true,\n//                matchBrackets: true\n//              }}/>\n//         )\n//     }\n// }"]},"metadata":{},"sourceType":"module"}