{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class QuestionsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      questions: null\n    };\n    this.codeMirror = window.CodeMirror;\n    this.themes = window.themes;\n    this.language = window.language;\n    this.editor = codeMirror(document.querySelector('#editor'), {\n      lineNumbers: true,\n      tabSize: 2,\n      matchBrackets: true,\n      styleActiveLine: true\n    });\n  }\n\n  //Helper function to insert text into CodeMirror editor\n  insertEditorStartingText(text) {\n    editor.getDoc().setValue(text);\n  } // async componentDidMount() {\n  //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n  //     const response = await fetch(FETCH_URL)\n  //     const fetchedData = await response.json()\n  //     const data = []\n  //     for(let value of fetchedData) {\n  //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n  //         data.push(obj)\n  //     }\n  //     this.setState({questions: data, loading: false})\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"editor\",\n        className: \"editor-div\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","QuestionsList","Component","state","loading","questions","codeMirror","window","CodeMirror","themes","language","editor","document","querySelector","lineNumbers","tabSize","matchBrackets","styleActiveLine","insertEditorStartingText","text","getDoc","setValue","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,eAAe,MAAMC,aAAN,SAA4BD,KAAK,CAACE,SAAlC,CAA4C;AAAA;AAAA;AAAA,SACvDC,KADuD,GAC/C;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,SAAS,EAAE;AAFP,KAD+C;AAAA,SAOvDC,UAPuD,GAO1CC,MAAM,CAACC,UAPmC;AAAA,SAQvDC,MARuD,GAQ9CF,MAAM,CAACE,MARuC;AAAA,SASvDC,QATuD,GAS5CH,MAAM,CAACG,QATqC;AAAA,SAYvDC,MAZuD,GAY9CL,UAAU,CAACM,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CAAD,EAAoC;AACnDC,MAAAA,WAAW,EAAE,IADsC;AAEnDC,MAAAA,OAAO,EAAE,CAF0C;AAGnDC,MAAAA,aAAa,EAAE,IAHoC;AAInDC,MAAAA,eAAe,EAAE;AAJkC,KAApC,CAZoC;AAAA;;AAmBvD;AACAC,EAAAA,wBAAwB,CAACC,IAAD,EAAO;AAC3BR,IAAAA,MAAM,CAACS,MAAP,GAAgBC,QAAhB,CAAyBF,IAAzB;AACH,GAtBsD,CAwBvD;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEAG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,6BACI;AAAK,QAAA,EAAE,EAAC,QAAR;AAAiB,QAAA,SAAS,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAKH;;AA/CsD","sourcesContent":["import React from \"react\";\n\nexport default class QuestionsList extends React.Component {\n    state = {\n        loading: true,\n        questions: null\n    }\n\n    //CodeMirror variable declarations\n    codeMirror = window.CodeMirror\n    themes = window.themes\n    language = window.language\n\n    //Initialize Codemirror editor\n    editor = codeMirror(document.querySelector('#editor'), {\n        lineNumbers: true,\n        tabSize: 2,\n        matchBrackets: true,\n        styleActiveLine: true\n      });\n\n    //Helper function to insert text into CodeMirror editor\n    insertEditorStartingText(text) {\n        editor.getDoc().setValue(text)\n    }\n\n    // async componentDidMount() {\n    //     const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n\n    //     const response = await fetch(FETCH_URL)\n\n    //     const fetchedData = await response.json()\n\n    //     const data = []\n\n    //     for(let value of fetchedData) {\n    //         var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n    //         data.push(obj)\n    //     }\n\n    //     this.setState({questions: data, loading: false})\n    // }\n\n    render() {\n        return(\n            <>\n                <div id=\"editor\" className=\"editor-div\"></div>\n            </>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}