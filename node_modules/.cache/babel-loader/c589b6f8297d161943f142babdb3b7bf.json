{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\UserLoginForm.js\";\nimport React, { useState } from \"react\";\nimport \"./QuestionList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class QuestionsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      questions: null,\n      questionsLength: null\n    };\n  }\n\n  async componentDidMount() {\n    const FETCH_URL = \"http://localhost:8080/api/v1/question\";\n    const response = await fetch(FETCH_URL);\n    const fetchedData = await response.json();\n    const data = [];\n\n    for (let value of fetchedData) {\n      var obj = {\n        Title: value.name,\n        Difficulty: value.difficulty,\n        Author: value.author\n      };\n      data.push(obj);\n    }\n\n    this.setState({\n      questions: data,\n      loading: false,\n      questionsLength: data.length\n    }); //Initialize the first button to be highlighted, since click on the home page will always load the first page of the questionList\n\n    document.getElementById('pagination-button-1').style.color = 'green';\n  }\n\n  render() {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    function validateForm() {\n      return email.length > 0 && password.length > 0;\n    }\n\n    function loginHandler() {\n      console.log(\"Login success!\");\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-div\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: loginHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          size: \"large\",\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            autoFocus: true,\n            type: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          size: \"large\",\n          controlId: \"password\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            autoFocus: true,\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          block: true,\n          size: \"large\",\n          type: \"submit\",\n          disabled: !validateForm(),\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/UserLoginForm.js"],"names":["React","useState","QuestionsList","Component","state","loading","questions","questionsLength","componentDidMount","FETCH_URL","response","fetch","fetchedData","json","data","value","obj","Title","name","Difficulty","difficulty","Author","author","push","setState","length","document","getElementById","style","color","render","email","setEmail","password","setPassword","validateForm","loginHandler","console","log","e","target"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./QuestionList.css\";\n\nexport default class QuestionsList extends React.Component {\n    state = {\n        loading: true,\n        questions: null,\n        questionsLength: null\n    }\n\n    async componentDidMount() {\n        const FETCH_URL = \"http://localhost:8080/api/v1/question\"\n\n        const response = await fetch(FETCH_URL)\n\n        const fetchedData = await response.json()\n\n        const data = []\n\n        for(let value of fetchedData) {\n            var obj = {Title: value.name, Difficulty: value.difficulty, Author: value.author}\n            data.push(obj)\n        }\n\n        this.setState({questions: data, loading: false, questionsLength: data.length})\n\n        //Initialize the first button to be highlighted, since click on the home page will always load the first page of the questionList\n        document.getElementById('pagination-button-1').style.color = 'green'\n    }\n\n    render() {\n        const [email, setEmail] = useState(\"\")\n        const [password, setPassword] = useState(\"\")\n\n        function validateForm() {\n            return email.length > 0 && password.length > 0\n        }\n\n        function loginHandler() {\n\n\n\n\n            console.log(\"Login success!\")\n        }\n\n        return(\n            <div className=\"login-div\">\n                <Form onSubmit={loginHandler}>\n                    <Form.Group size=\"large\" controlId=\"email\">\n                        <Form.Label>Email</Form.Label>\n                        <Form.Control autoFocus type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n                    </Form.Group>\n                    <Form.Group size=\"large\" controlId=\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control autoFocus type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}/>\n                    </Form.Group>\n                    <Button block size=\"large\" type=\"submit\" disabled={!validateForm()}>\n                        Login\n                    </Button>\n                </Form>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}