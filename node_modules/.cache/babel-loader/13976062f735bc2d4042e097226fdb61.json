{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeMirrorEditor = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [editorText, changeEditorText] = useState(\"test2\");\n\n  const editor = /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: editorText,\n    options: {\n      theme: 'default',\n      // keyMap: 'sublime', \n      mode: 'jsx',\n      lineNumbers: true // tabSize: 2,\n      // styleActiveLine: true,\n      // matchBrackets: true\n\n    },\n    onChange: (editor, data, value) => {}\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 20\n  }, this);\n\n  useImperativeHandle(ref, () => ({\n    updateEditorText() {\n      changeEditorText(\"test\");\n      console.log(editorText);\n    }\n\n  }));\n  return editor;\n}, \"Eov9FR131aWJGxpXcdsPWNEFpcs=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = CodeMirrorEditor;\nexport default CodeMirrorEditor; // export default class CodeMirrorEditor extends React.Component {\n//     state = {\n//         loading: true,\n//         editorText: null\n//     }\n//     render() {\n//         const editor = <CodeMirror value={this.state.editorText} options={{ \n//                             theme: 'default', \n//                             keyMap: 'sublime', \n//                             mode: 'jsx',\n//                             lineNumbers: true,\n//                             tabSize: 2,\n//                             styleActiveLine: true,\n//                             matchBrackets: true\n//                         }}/>\n//         useImperativeHandle(ref, () => ({\n//             updateEditorText() {\n//                 // changeEditorText(\"test\")\n//             }\n//         }))\n//         return(\n//             editor\n//         )\n//     }\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CodeMirrorEditor$forwardRef\");\n$RefreshReg$(_c2, \"CodeMirrorEditor\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","useState","forwardRef","useImperativeHandle","Controlled","CodeMirror","CodeMirrorEditor","props","ref","editorText","changeEditorText","editor","theme","mode","lineNumbers","data","value","updateEditorText","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,SAAQC,UAAU,IAAIC,UAAtB,QAAuC,mBAAvC;AACA,OAAO,2BAAP;AACA,OAAO,8BAAP;;AAEA,MAAMC,gBAAgB,gBAAGJ,UAAU,SAAC,CAACK,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAChD,QAAM,CAACC,UAAD,EAAaC,gBAAb,IAAiCT,QAAQ,CAAC,OAAD,CAA/C;;AAEA,QAAMU,MAAM,gBAAG,QAAC,UAAD;AAAY,IAAA,KAAK,EAAEF,UAAnB;AAA+B,IAAA,OAAO,EAAE;AACnCG,MAAAA,KAAK,EAAE,SAD4B;AAEnC;AACAC,MAAAA,IAAI,EAAE,KAH6B;AAInCC,MAAAA,WAAW,EAAE,IAJsB,CAKnC;AACA;AACA;;AAPmC,KAAxC;AASC,IAAA,QAAQ,EAAE,CAACH,MAAD,EAASI,IAAT,EAAeC,KAAf,KAAyB,CAElC;AAXF;AAAA;AAAA;AAAA;AAAA,UAAf;;AAcAb,EAAAA,mBAAmB,CAACK,GAAD,EAAM,OAAO;AAC5BS,IAAAA,gBAAgB,GAAG;AACfP,MAAAA,gBAAgB,CAAC,MAAD,CAAhB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;AACH;;AAJ2B,GAAP,CAAN,CAAnB;AAOA,SACIE,MADJ;AAGH,CA3BkC;AAAA,UAiB/BR,mBAjB+B;AAAA,GAAnC;MAAMG,gB;AA6BN,eAAeA,gBAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport {Controlled as CodeMirror} from \"react-codemirror2\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\n\nconst CodeMirrorEditor = forwardRef((props, ref) => {\n    const [editorText, changeEditorText] = useState(\"test2\")\n\n    const editor = <CodeMirror value={editorText} options={{ \n                        theme: 'default', \n                        // keyMap: 'sublime', \n                        mode: 'jsx',\n                        lineNumbers: true,\n                        // tabSize: 2,\n                        // styleActiveLine: true,\n                        // matchBrackets: true\n                    }}\n                    onChange={(editor, data, value) => {\n                        \n                    }}\n                    />\n\n    useImperativeHandle(ref, () => ({\n        updateEditorText() {\n            changeEditorText(\"test\")\n            console.log(editorText)\n        }\n    }))\n\n    return(\n        editor\n    )\n})\n\nexport default CodeMirrorEditor\n\n// export default class CodeMirrorEditor extends React.Component {\n//     state = {\n//         loading: true,\n//         editorText: null\n//     }\n\n//     render() {\n//         const editor = <CodeMirror value={this.state.editorText} options={{ \n//                             theme: 'default', \n//                             keyMap: 'sublime', \n//                             mode: 'jsx',\n//                             lineNumbers: true,\n//                             tabSize: 2,\n//                             styleActiveLine: true,\n//                             matchBrackets: true\n//                         }}/>\n\n//         useImperativeHandle(ref, () => ({\n//             updateEditorText() {\n//                 // changeEditorText(\"test\")\n//             }\n//         }))\n\n//         return(\n//             editor\n//         )\n//     }\n// }"]},"metadata":{},"sourceType":"module"}