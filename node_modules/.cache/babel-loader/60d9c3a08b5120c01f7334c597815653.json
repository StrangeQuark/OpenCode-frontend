{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\";\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css'; // const CodeMirrorEditor = forwardRef((props, ref) => {\n//     // const [editorText, changeEditorText] = useState(\"test2\")\n//     const editor = <CodeMirror value={editorText} options={{ \n//                         theme: 'default', \n//                         keyMap: 'sublime', \n//                         mode: 'jsx',\n//                         lineNumbers: true,\n//                         tabSize: 2,\n//                         styleActiveLine: true,\n//                         matchBrackets: true\n//                     }}/>\n//     useImperativeHandle(ref, () => ({\n//         updateEditorText() {\n//             // changeEditorText(\"test\")\n//         }\n//     }))\n//     return(\n//         editor\n//     )\n// })\n// export default CodeMirrorEditor\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CodeMirrorEditor extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true,\n      questions: null\n    };\n  }\n\n  render() {\n    const editor = /*#__PURE__*/_jsxDEV(CodeMirror, {\n      value: editorText,\n      options: {\n        theme: 'default',\n        keyMap: 'sublime',\n        mode: 'jsx',\n        lineNumbers: true,\n        tabSize: 2,\n        styleActiveLine: true,\n        matchBrackets: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 24\n    }, this);\n\n    useImperativeHandle(ref, () => ({\n      updateEditorText() {// changeEditorText(\"test\")\n      }\n\n    }));\n    return editor;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","useState","forwardRef","useImperativeHandle","CodeMirror","CodeMirrorEditor","Component","state","loading","questions","render","editor","editorText","theme","keyMap","mode","lineNumbers","tabSize","styleActiveLine","matchBrackets","ref","updateEditorText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,2BAAP;AACA,OAAO,8BAAP,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAEA,eAAe,MAAMC,gBAAN,SAA+BL,KAAK,CAACM,SAArC,CAA+C;AAAA;AAAA;AAAA,SAC1DC,KAD0D,GAClD;AACJC,MAAAA,OAAO,EAAE,IADL;AAEJC,MAAAA,SAAS,EAAE;AAFP,KADkD;AAAA;;AAM1DC,EAAAA,MAAM,GAAG;AACL,UAAMC,MAAM,gBAAG,QAAC,UAAD;AAAY,MAAA,KAAK,EAAEC,UAAnB;AAA+B,MAAA,OAAO,EAAE;AACnCC,QAAAA,KAAK,EAAE,SAD4B;AAEnCC,QAAAA,MAAM,EAAE,SAF2B;AAGnCC,QAAAA,IAAI,EAAE,KAH6B;AAInCC,QAAAA,WAAW,EAAE,IAJsB;AAKnCC,QAAAA,OAAO,EAAE,CAL0B;AAMnCC,QAAAA,eAAe,EAAE,IANkB;AAOnCC,QAAAA,aAAa,EAAE;AAPoB;AAAxC;AAAA;AAAA;AAAA;AAAA,YAAf;;AAUAhB,IAAAA,mBAAmB,CAACiB,GAAD,EAAM,OAAO;AAC5BC,MAAAA,gBAAgB,GAAG,CACf;AACH;;AAH2B,KAAP,CAAN,CAAnB;AAMA,WACIV,MADJ;AAGH;;AA1ByD","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\n\n// const CodeMirrorEditor = forwardRef((props, ref) => {\n//     // const [editorText, changeEditorText] = useState(\"test2\")\n\n//     const editor = <CodeMirror value={editorText} options={{ \n//                         theme: 'default', \n//                         keyMap: 'sublime', \n//                         mode: 'jsx',\n//                         lineNumbers: true,\n//                         tabSize: 2,\n//                         styleActiveLine: true,\n//                         matchBrackets: true\n//                     }}/>\n\n//     useImperativeHandle(ref, () => ({\n//         updateEditorText() {\n//             // changeEditorText(\"test\")\n//         }\n//     }))\n\n//     return(\n//         editor\n//     )\n// })\n\n// export default CodeMirrorEditor\n\nexport default class CodeMirrorEditor extends React.Component {\n    state = {\n        loading: true,\n        questions: null\n    }\n\n    render() {\n        const editor = <CodeMirror value={editorText} options={{ \n                            theme: 'default', \n                            keyMap: 'sublime', \n                            mode: 'jsx',\n                            lineNumbers: true,\n                            tabSize: 2,\n                            styleActiveLine: true,\n                            matchBrackets: true\n                        }}/>\n\n        useImperativeHandle(ref, () => ({\n            updateEditorText() {\n                // changeEditorText(\"test\")\n            }\n        }))\n\n        return(\n            editor\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}