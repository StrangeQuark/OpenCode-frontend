{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\components\\\\CodeMirrorEditor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/darcula.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeMirrorEditor = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [editorText, changeEditorText] = useState(props.code);\n  const [editorTheme, changeEditorTheme] = useState(props.theme);\n\n  const editor = /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: editorText,\n    options: {\n      theme: editorTheme,\n      keyMap: 'sublime',\n      mode: 'jsx',\n      lineNumbers: true,\n      tabSize: 2,\n      styleActiveLine: true,\n      matchBrackets: true,\n      autoCloseBrackets: true\n    },\n    onBeforeChange: (editor, data, value) => {\n      changeEditorText(value);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 20\n  }, this);\n\n  useImperativeHandle(ref, () => ({\n    updateEditorText(text) {\n      changeEditorText(text);\n    },\n\n    getEditorText() {\n      return editorText;\n    },\n\n    updateEditorTheme(theme) {\n      changeEditorTheme(theme);\n    }\n\n  }));\n  return editor;\n}, \"OLu7qZPH4Z3Vu3m3mkyKBTh/Mj4=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = CodeMirrorEditor;\nexport default CodeMirrorEditor;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CodeMirrorEditor$forwardRef\");\n$RefreshReg$(_c2, \"CodeMirrorEditor\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/components/CodeMirrorEditor.js"],"names":["React","useState","forwardRef","useImperativeHandle","Controlled","CodeMirror","CodeMirrorEditor","props","ref","editorText","changeEditorText","code","editorTheme","changeEditorTheme","theme","editor","keyMap","mode","lineNumbers","tabSize","styleActiveLine","matchBrackets","autoCloseBrackets","data","value","updateEditorText","text","getEditorText","updateEditorTheme"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,SAAQC,UAAU,IAAIC,UAAtB,QAAuC,mBAAvC;AACA,OAAO,qCAAP;AACA,OAAO,2BAAP;AACA,OAAO,8BAAP;AACA,OAAO,8BAAP;;AAEA,MAAMC,gBAAgB,gBAAGJ,UAAU,SAAC,CAACK,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAChD,QAAM,CAACC,UAAD,EAAaC,gBAAb,IAAiCT,QAAQ,CAACM,KAAK,CAACI,IAAP,CAA/C;AAEA,QAAM,CAACC,WAAD,EAAcC,iBAAd,IAAmCZ,QAAQ,CAACM,KAAK,CAACO,KAAP,CAAjD;;AAEA,QAAMC,MAAM,gBAAG,QAAC,UAAD;AAAY,IAAA,KAAK,EAAEN,UAAnB;AAA+B,IAAA,OAAO,EAAE;AACnCK,MAAAA,KAAK,EAAEF,WAD4B;AAEnCI,MAAAA,MAAM,EAAE,SAF2B;AAGnCC,MAAAA,IAAI,EAAE,KAH6B;AAInCC,MAAAA,WAAW,EAAE,IAJsB;AAKnCC,MAAAA,OAAO,EAAE,CAL0B;AAMnCC,MAAAA,eAAe,EAAE,IANkB;AAOnCC,MAAAA,aAAa,EAAE,IAPoB;AAQnCC,MAAAA,iBAAiB,EAAE;AARgB,KAAxC;AAUC,IAAA,cAAc,EAAE,CAACP,MAAD,EAASQ,IAAT,EAAeC,KAAf,KAAyB;AACrCd,MAAAA,gBAAgB,CAACc,KAAD,CAAhB;AACH;AAZF;AAAA;AAAA;AAAA;AAAA,UAAf;;AAeArB,EAAAA,mBAAmB,CAACK,GAAD,EAAM,OAAO;AAC5BiB,IAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnBhB,MAAAA,gBAAgB,CAACgB,IAAD,CAAhB;AACH,KAH2B;;AAI5BC,IAAAA,aAAa,GAAG;AACZ,aAAOlB,UAAP;AACH,KAN2B;;AAO5BmB,IAAAA,iBAAiB,CAACd,KAAD,EAAQ;AACrBD,MAAAA,iBAAiB,CAACC,KAAD,CAAjB;AACH;;AAT2B,GAAP,CAAN,CAAnB;AAYA,SACIC,MADJ;AAGH,CAnCkC;AAAA,UAoB/BZ,mBApB+B;AAAA,GAAnC;MAAMG,gB;AAqCN,eAAeA,gBAAf","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport {Controlled as CodeMirror} from \"react-codemirror2\";\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/darcula.css'\n\nconst CodeMirrorEditor = forwardRef((props, ref) => {\n    const [editorText, changeEditorText] = useState(props.code)\n\n    const [editorTheme, changeEditorTheme] = useState(props.theme)\n\n    const editor = <CodeMirror value={editorText} options={{ \n                        theme: editorTheme, \n                        keyMap: 'sublime', \n                        mode: 'jsx',\n                        lineNumbers: true,\n                        tabSize: 2,\n                        styleActiveLine: true,\n                        matchBrackets: true,\n                        autoCloseBrackets: true\n                    }}\n                    onBeforeChange={(editor, data, value) => {\n                        changeEditorText(value)\n                    }}\n                    />\n\n    useImperativeHandle(ref, () => ({\n        updateEditorText(text) {\n            changeEditorText(text)\n        },\n        getEditorText() {\n            return editorText\n        },\n        updateEditorTheme(theme) {\n            changeEditorTheme(theme)\n        }\n    }))\n\n    return(\n        editor\n    )\n})\n\nexport default CodeMirrorEditor"]},"metadata":{},"sourceType":"module"}