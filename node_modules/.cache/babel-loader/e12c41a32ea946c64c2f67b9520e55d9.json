{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zacha\\\\Desktop\\\\opencode-frontend\\\\src\\\\Question.js\";\nimport React from 'react';\nimport Toolbar from './components/Toolbar';\nimport CodeMirrorEditor from './components/CodeMirrorEditor';\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\nimport './Question.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Question() {\n  //Grab the url search params\n  const query = window.location.search;\n  const urlParameters = new URLSearchParams(query);\n  const nameParameter = urlParameters.get('name'); //URL for making the API calls\n\n  var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter; //Insert questionHTML from database into left panel and\n  //insert editorStartingText from database into CodeMirror editor\n\n  function populateQuestionPanel(urlString) {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n    }));\n  } //Get correct answer from database\n\n\n  function executeCorrectAnswer(urlString) {\n    fetch(urlString).then(response => response.json().then(function (json) {\n      insertProblemHTML(json.questionHTML);\n    }));\n  }\n\n  populateQuestionPanel(urlString); //Helper function to insert text into inner html of left toolbar\n\n  function insertProblemHTML(html) {\n    document.getElementById('left-toolbar').innerHTML = html;\n  } //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n  // function codeToLogs() {\n  //   var text = editor.getValue()\n  //   console.log(text)\n  //   fetch('http://localhost:8080/api/java', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: text\n  //   }).then(response => response.text().then(\n  //     function (text) {\n  //       response_text_area.value = text\n  //     }\n  //   ))\n  // }\n  //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n  // function runTests() {\n  //   fetch(urlString).then(response => response.json().then(function(json) {\n  //       var text = editor.getValue()\n  //       var answer = json.correctAnswer\n  //       var tests = json.testFileText\n  //       var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer\n  //       fetch('http://localhost:8080/api/java', {\n  //         method: 'POST',\n  //         headers: {\n  //           'Content-Type': 'application/json'\n  //         },\n  //         body: allClasses\n  //       }).then(response => response.text().then(\n  //         function (text) {\n  //           run_tests_text_area.value = text\n  //         }\n  //       ))\n  //       }));\n  // }\n  //Change colors of components based on which theme is selected\n\n\n  function changeTheme(sel) {\n    var toolbar = document.getElementById('editor-toolbar');\n    var compileButton = document.getElementById('compile-button');\n    var runTestsButton = document.getElementById('run-tests-button');\n    var selection = sel.options[sel.selectedIndex].value;\n    var elem = document.querySelector('.editor-toolbar *');\n    var style = getComputedStyle(elem);\n\n    if (selection == 'default') {\n      toolbar.style.backgroundColor = \"#ffffff\";\n      compileButton.style.backgroundColor = \"#ffffff\";\n      compileButton.style.color = \"#000000\";\n      runTestsButton.style.backgroundColor = \"#ffffff\";\n      runTestsButton.style.color = \"#000000\"; // style.borderColor = \"#ffffff\"\n    } else if (selection == 'darcula') {\n      toolbar.style.backgroundColor = \"#2b2b2b\";\n      compileButton.style.backgroundColor = \"#2b2b2b\";\n      compileButton.style.color = \"#a9b7c6\";\n      runTestsButton.style.backgroundColor = \"#2b2b2b\";\n      runTestsButton.style.color = \"#a9b7c6\"; // style.borderColor = \"#2b2b2b\"\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"left-toolbar\",\n        className: \"left-toolbar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"editor-toolbar\",\n          className: \"editor-toolbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"run-tests-button\",\n            children: \"Execute tests\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"compile-button\",\n            children: \"Compile and Run\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"themes\",\n            id: \"themes\",\n            onChange: e => changeTheme(e.target),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"default\",\n              children: \"Default\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"darcula\",\n              children: \"Darcula\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"language\",\n            id: \"language\",\n            children: /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"java\",\n              children: \"Java\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CodeMirrorEditor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"response_div\",\n      className: \"bottom-toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"run_tests_text_area\",\n        id: \"run_tests_text_area\",\n        readOnly: true,\n        className: \"tests-text-area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        name: \"response_text_area\",\n        id: \"response_text_area\",\n        readOnly: \"true\",\n        className: \"response-text-area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/Users/Zacha/Desktop/opencode-frontend/src/Question.js"],"names":["React","Toolbar","CodeMirrorEditor","CodeMirror","Question","query","window","location","search","urlParameters","URLSearchParams","nameParameter","get","urlString","populateQuestionPanel","fetch","then","response","json","insertProblemHTML","questionHTML","executeCorrectAnswer","html","document","getElementById","innerHTML","changeTheme","sel","toolbar","compileButton","runTestsButton","selection","options","selectedIndex","value","elem","querySelector","style","getComputedStyle","backgroundColor","color","e","target"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,2BAAP;AACA,OAAO,8BAAP;AACA,OAAO,gBAAP;;;;AAEA,SAASC,QAAT,GAAoB;AAChB;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA9B;AACA,QAAMC,aAAa,GAAG,IAAIC,eAAJ,CAAoBL,KAApB,CAAtB;AACA,QAAMM,aAAa,GAAGF,aAAa,CAACG,GAAd,CAAkB,MAAlB,CAAtB,CAJgB,CAMhB;;AACA,MAAIC,SAAS,GAAG,2CAA2CF,aAA3D,CAPgB,CAUhB;AACA;;AACA,WAASG,qBAAT,CAA+BD,SAA/B,EAA0C;AACxCE,IAAAA,KAAK,CAACF,SAAD,CAAL,CACGG,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAASE,IAAT,EAAe;AACpDC,MAAAA,iBAAiB,CAACD,IAAI,CAACE,YAAN,CAAjB;AACD,KAFiB,CADpB;AAID,GAjBe,CAoBhB;;;AACA,WAASC,oBAAT,CAA8BR,SAA9B,EAAyC;AACvCE,IAAAA,KAAK,CAACF,SAAD,CAAL,CACGG,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,UAASE,IAAT,EAAe;AACpDC,MAAAA,iBAAiB,CAACD,IAAI,CAACE,YAAN,CAAjB;AACD,KAFiB,CADpB;AAID;;AACDN,EAAAA,qBAAqB,CAACD,SAAD,CAArB,CA3BgB,CA8BhB;;AACA,WAASM,iBAAT,CAA2BG,IAA3B,EAAiC;AAC/BC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoDH,IAApD;AACD,GAjCe,CAoChB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;AACA,WAASI,WAAT,CAAqBC,GAArB,EAA0B;AACxB,QAAIC,OAAO,GAAGL,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAAd;AACA,QAAIK,aAAa,GAAGN,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CAApB;AACA,QAAIM,cAAc,GAAGP,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAArB;AACA,QAAIO,SAAS,GAAGJ,GAAG,CAACK,OAAJ,CAAYL,GAAG,CAACM,aAAhB,EAA+BC,KAA/C;AAEA,QAAIC,IAAI,GAAGZ,QAAQ,CAACa,aAAT,CAAuB,mBAAvB,CAAX;AACA,QAAIC,KAAK,GAAGC,gBAAgB,CAACH,IAAD,CAA5B;;AAIA,QAAIJ,SAAS,IAAI,SAAjB,EAA4B;AAC1BH,MAAAA,OAAO,CAACS,KAAR,CAAcE,eAAd,GAAgC,SAAhC;AAEAV,MAAAA,aAAa,CAACQ,KAAd,CAAoBE,eAApB,GAAsC,SAAtC;AACAV,MAAAA,aAAa,CAACQ,KAAd,CAAoBG,KAApB,GAA4B,SAA5B;AAEAV,MAAAA,cAAc,CAACO,KAAf,CAAqBE,eAArB,GAAuC,SAAvC;AACAT,MAAAA,cAAc,CAACO,KAAf,CAAqBG,KAArB,GAA6B,SAA7B,CAP0B,CAS1B;AACD,KAVD,MAWK,IAAIT,SAAS,IAAI,SAAjB,EAA4B;AAC/BH,MAAAA,OAAO,CAACS,KAAR,CAAcE,eAAd,GAAgC,SAAhC;AAEAV,MAAAA,aAAa,CAACQ,KAAd,CAAoBE,eAApB,GAAsC,SAAtC;AACAV,MAAAA,aAAa,CAACQ,KAAd,CAAoBG,KAApB,GAA4B,SAA5B;AAEAV,MAAAA,cAAc,CAACO,KAAf,CAAqBE,eAArB,GAAuC,SAAvC;AACAT,MAAAA,cAAc,CAACO,KAAf,CAAqBG,KAArB,GAA6B,SAA7B,CAP+B,CAS/B;AACD;AACF;;AAED,sBACI;AAAA,4BACI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAK,QAAA,EAAE,EAAC,cAAR;AAAuB,QAAA,SAAS,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACA;AAAK,UAAA,EAAE,EAAC,gBAAR;AAAyB,UAAA,SAAS,EAAC,gBAAnC;AAAA,kCAEI;AAAQ,YAAA,EAAE,EAAC,kBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAMI;AAAQ,YAAA,EAAE,EAAC,gBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANJ,eAUI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,EAAE,EAAC,QAAzB;AAAkC,YAAA,QAAQ,EAAEC,CAAC,IAAIf,WAAW,CAACe,CAAC,CAACC,MAAH,CAA5D;AAAA,oCACA;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA;AAAQ,cAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVJ,eAcI;AAAQ,YAAA,IAAI,EAAC,UAAb;AAAwB,YAAA,EAAE,EAAC,UAA3B;AAAA,mCACA;AAAQ,cAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,kBAdJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAmBA,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,gBAnBA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eA0BI;AAAK,MAAA,EAAE,EAAC,cAAR;AAAuB,MAAA,SAAS,EAAC,gBAAjC;AAAA,8BACI;AAAU,QAAA,IAAI,EAAC,qBAAf;AAAqC,QAAA,EAAE,EAAC,qBAAxC;AAA8D,QAAA,QAAQ,EAAE,IAAxE;AAA8E,QAAA,SAAS,EAAC;AAAxF;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAU,QAAA,IAAI,EAAC,oBAAf;AAAoC,QAAA,EAAE,EAAC,oBAAvC;AAA4D,QAAA,QAAQ,EAAC,MAArE;AAA4E,QAAA,SAAS,EAAC;AAAtF;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BJ;AAAA,kBADJ;AAiCH;;KAxJQtC,Q;AA0JT,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport Toolbar from './components/Toolbar'\nimport CodeMirrorEditor from './components/CodeMirrorEditor'\nimport CodeMirror from \"react-codemirror\";\nimport 'codemirror/keymap/sublime';\nimport 'codemirror/theme/monokai.css';\nimport './Question.css'\n\nfunction Question() {\n    //Grab the url search params\n    const query = window.location.search\n    const urlParameters = new URLSearchParams(query);\n    const nameParameter = urlParameters.get('name')\n\n    //URL for making the API calls\n    var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter\n\n\n    //Insert questionHTML from database into left panel and\n    //insert editorStartingText from database into CodeMirror editor\n    function populateQuestionPanel(urlString) {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n        }));\n    }\n\n\n    //Get correct answer from database\n    function executeCorrectAnswer(urlString) {\n      fetch(urlString)\n        .then(response => response.json().then(function(json) {\n          insertProblemHTML(json.questionHTML)\n        }));\n    }\n    populateQuestionPanel(urlString)\n\n\n    //Helper function to insert text into inner html of left toolbar\n    function insertProblemHTML(html) {\n      document.getElementById('left-toolbar').innerHTML = html\n    }\n\n\n    //Submit the text inside the CodeMirror editor to the API for compilation,\n    //and get the cmd line output and error output and display them in the\n    //bottom panel of the page\n    // function codeToLogs() {\n    //   var text = editor.getValue()\n    //   console.log(text)\n\n    //   fetch('http://localhost:8080/api/java', {\n    //     method: 'POST',\n    //     headers: {\n    //       'Content-Type': 'application/json'\n    //     },\n    //     body: text\n    //   }).then(response => response.text().then(\n    //     function (text) {\n    //       response_text_area.value = text\n    //     }\n    //   ))\n    // }\n\n\n    //Submit the text inside the CodeMirror editor to the API for compilation,\n    //and get the cmd line output and error output and display them in the\n    //bottom panel of the page\n    // function runTests() {\n    //   fetch(urlString).then(response => response.json().then(function(json) {\n    //       var text = editor.getValue()\n    //       var answer = json.correctAnswer\n    //       var tests = json.testFileText\n\n    //       var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer\n\n    //       fetch('http://localhost:8080/api/java', {\n    //         method: 'POST',\n    //         headers: {\n    //           'Content-Type': 'application/json'\n    //         },\n    //         body: allClasses\n    //       }).then(response => response.text().then(\n    //         function (text) {\n    //           run_tests_text_area.value = text\n    //         }\n    //       ))\n    //       }));\n    // }\n\n\n    //Change colors of components based on which theme is selected\n    function changeTheme(sel) {\n      var toolbar = document.getElementById('editor-toolbar')\n      var compileButton = document.getElementById('compile-button')\n      var runTestsButton = document.getElementById('run-tests-button')\n      var selection = sel.options[sel.selectedIndex].value\n\n      var elem = document.querySelector('.editor-toolbar *');\n      var style = getComputedStyle(elem);\n\n\n\n      if (selection == 'default') {\n        toolbar.style.backgroundColor = \"#ffffff\"\n\n        compileButton.style.backgroundColor = \"#ffffff\"\n        compileButton.style.color = \"#000000\"\n\n        runTestsButton.style.backgroundColor = \"#ffffff\"\n        runTestsButton.style.color = \"#000000\"\n\n        // style.borderColor = \"#ffffff\"\n      }\n      else if (selection == 'darcula') {\n        toolbar.style.backgroundColor = \"#2b2b2b\"\n\n        compileButton.style.backgroundColor = \"#2b2b2b\"\n        compileButton.style.color = \"#a9b7c6\"\n\n        runTestsButton.style.backgroundColor = \"#2b2b2b\"\n        runTestsButton.style.color = \"#a9b7c6\"\n\n        // style.borderColor = \"#2b2b2b\"\n      }\n    }\n\n    return(\n        <>\n            <Toolbar />\n            <div className=\"top-container\">\n                <div id=\"left-toolbar\" className=\"left-toolbar\"></div>\n                <div className=\"editor-container\">\n                <div id=\"editor-toolbar\" className=\"editor-toolbar\">\n                    {/* <button id=\"run-tests-button\" onClick={runTests}> */}\n                    <button id=\"run-tests-button\">\n                    Execute tests\n                    </button>\n                    {/* <button id=\"compile-button\" onClick={codeToLogs}> */}\n                    <button id=\"compile-button\">\n                    Compile and Run\n                    </button>\n                    {/* <label for=\"themes\">Theme:</label> */}\n                    <select name=\"themes\" id=\"themes\" onChange={e => changeTheme(e.target)}>\n                    <option value=\"default\">Default</option>\n                    <option value=\"darcula\">Darcula</option>\n                    </select>\n                    <select name=\"language\" id=\"language\">\n                    <option value=\"java\">Java</option>\n                    </select>\n                </div>\n                <CodeMirrorEditor />\n                </div>\n            </div>\n            <div id=\"response_div\" className=\"bottom-toolbar\">\n                <textarea name=\"run_tests_text_area\" id=\"run_tests_text_area\" readOnly={true} className=\"tests-text-area\"></textarea>\n                <textarea name=\"response_text_area\" id=\"response_text_area\" readOnly=\"true\" className=\"response-text-area\"></textarea>\n            </div>\n        </>\n    )\n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}