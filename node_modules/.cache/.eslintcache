[{"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\index.js":"1","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\App.js":"3","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Home.js":"4","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Blog.js":"5","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Projects.js":"6","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Login.js":"7","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Question.js":"8","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\Toolbar.js":"9","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\QuestionsList.js":"10","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\CodeMirrorEditor.js":"11","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\UserLoginForm.js":"12","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\SignUp.js":"13","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\UserSignUpForm.js":"14","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\ResetPasswordSearch.js":"15","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\ResetPasswordSearchForm.js":"16","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\ResetPassword.js":"17","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\ResetPasswordForm.js":"18","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Project.js":"19","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\UserProfile.js":"20","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\UserInfo.js":"21","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\About.js":"22"},{"size":591,"mtime":1638844819574,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1638844819582,"results":"25","hashOfConfig":"24"},{"size":1255,"mtime":1644208347357,"results":"26","hashOfConfig":"24"},{"size":343,"mtime":1641517941860,"results":"27","hashOfConfig":"24"},{"size":244,"mtime":1641081310518,"results":"28","hashOfConfig":"24"},{"size":349,"mtime":1642650475557,"results":"29","hashOfConfig":"24"},{"size":264,"mtime":1642039274229,"results":"30","hashOfConfig":"24"},{"size":7417,"mtime":1643773389951,"results":"31","hashOfConfig":"24"},{"size":1436,"mtime":1644208344422,"results":"32","hashOfConfig":"24"},{"size":6843,"mtime":1644208149607,"results":"33","hashOfConfig":"24"},{"size":1721,"mtime":1643773308677,"results":"34","hashOfConfig":"24"},{"size":6156,"mtime":1643773774738,"results":"35","hashOfConfig":"24"},{"size":269,"mtime":1642638448357,"results":"36","hashOfConfig":"24"},{"size":8077,"mtime":1642638924549,"results":"37","hashOfConfig":"24"},{"size":323,"mtime":1642553910972,"results":"38","hashOfConfig":"24"},{"size":4457,"mtime":1642556118643,"results":"39","hashOfConfig":"24"},{"size":293,"mtime":1642556267550,"results":"40","hashOfConfig":"24"},{"size":5212,"mtime":1643772983075,"results":"41","hashOfConfig":"24"},{"size":1030,"mtime":1643858509190,"results":"42","hashOfConfig":"24"},{"size":1960,"mtime":1643858643978,"results":"43","hashOfConfig":"24"},{"size":3679,"mtime":1643857926583,"results":"44","hashOfConfig":"24"},{"size":1018,"mtime":1644209244954,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"121vhy0",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\index.js",[],["97","98"],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\App.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Home.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Blog.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Projects.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Login.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Question.js",["99","100","101"],"import React, { useEffect, useRef, useState } from 'react'\nimport Toolbar from './components/Toolbar'\nimport CodeMirrorEditor from './components/CodeMirrorEditor'\nimport './Question.css'\n\nfunction Question() {\n  //Grab the url search params\n  const query = window.location.search\n  const urlParameters = new URLSearchParams(query)\n  const nameParameter = urlParameters.get('name')\n\n  //Grab the bottom panel of the screen\n  // var response_text_area = document.getElementById('response_text_area')\n\n  //Grab the bottom panel of the screen\n  var run_tests_text_area = document.getElementById('run_tests_text_area')\n\n  //URL for making the API calls\n  var urlString = \"http://localhost:8080/api/v1/question/\" + nameParameter\n\n  //Reference to CodeMirrorEditor\n  const codeMirrorRef = useRef()\n\n  //Reference to CodeMirrorEditor\n  const executionPanelRef = useRef()\n\n  //Variable to hold the initial codemirror text\n  const [editorText, setEditorText] = useState()\n\n  //Fetch the data after the initial rendering of the page\n  //It is important to add the second argument, [], which runs this function only once after initial rendering\n  //Without the second argument, this function will run after each time the page is re-rendered\n  useEffect(() => {\n    fetch(urlString)\n      .then(response => response.json().then(function(json) {\n        insertProblemHTML(json.questionHTML)\n        setEditorText(json.editorStartingText)\n      }));\n  }, [])\n\n\n  //Get correct answer from database\n  function executeCorrectAnswer() {\n    fetch(urlString)\n      .then(response => response.json().then(function(json) {\n        insertProblemHTML(json.questionHTML)\n      }));\n  }\n\n\n  //Helper function to insert text into inner html of left toolbar\n  function insertProblemHTML(html) {\n    document.getElementById('question-toolbar').innerHTML = html\n  }\n\n\n  // //Submit the text inside the CodeMirror editor to the API for compilation,\n  // //and get the cmd line output and error output and display them in the\n  // //bottom panel of the page\n  // function codeToLogs() {\n  //   var text = codeMirrorRef.current.getEditorText()\n  //   console.log(text)\n\n  //   fetch('http://localhost:8080/api/java', {\n  //     method: 'POST',\n  //     headers: {\n  //       'Content-Type': 'application/json'\n  //     },\n  //     body: text\n  //   }).then(response => response.text().then(\n  //     function (text) {\n  //       response_text_area.value = text\n  //     }\n  //   ))\n  // }\n\n\n  //Submit the text inside the CodeMirror editor to the API for compilation,\n  //and get the cmd line output and error output and display them in the\n  //bottom panel of the page\n  function runTests() {\n    fetch(urlString).then(response => response.json().then(function(json) {\n        var text = codeMirrorRef.current.getEditorText()\n        var answer = json.correctAnswer\n        var tests = json.testFileText\n\n        var allClasses = tests + \"\\n\\n\" + text + \"\\n\\n\" + answer\n\n        fetch('http://localhost:8080/api/java', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: allClasses\n        }).then(response => response.text().then(\n          function (text) {\n            executionPanelRef.current.updateEditorText(text)\n          }\n        ))\n        }));\n  }\n\n\n  //Change colors of components based on which theme is selected\n  function changeTheme(sel) {\n    var toolbar = document.getElementById('editor-toolbar')\n    var questionToolbar = document.getElementById('question-toolbar')\n    // var compileButton = document.getElementById('compile-button')\n    var runTestsButton = document.getElementById('run-tests-button')\n    var themeSelect = document.getElementById('themes')\n    var languageSelect = document.getElementById('language')\n    var selection = sel.options[sel.selectedIndex].value\n\n\n    if (selection === 'default') {\n      codeMirrorRef.current.updateEditorTheme('default')\n\n      executionPanelRef.current.updateEditorTheme('default')\n\n      toolbar.style.backgroundColor = \"#ffffff\"\n\n      // compileButton.style.backgroundColor = \"#ffffff\"\n      // compileButton.style.color = \"#000000\"\n\n      questionToolbar.style.backgroundColor = \"#ffffff\"\n      questionToolbar.style.color = \"#000000\"\n\n      runTestsButton.style.backgroundColor = \"#ffffff\"\n      runTestsButton.style.color = \"#000000\"\n\n      themeSelect.style.backgroundColor = \"#ffffff\"\n      themeSelect.style.color = \"#000000\"\n\n      languageSelect.style.backgroundColor = \"#ffffff\"\n      languageSelect.style.color = \"#000000\"\n    }\n    else if (selection === 'darcula') {\n      codeMirrorRef.current.updateEditorTheme('darcula')\n\n      executionPanelRef.current.updateEditorTheme('darcula')\n\n      toolbar.style.backgroundColor = \"#2b2b2b\"\n\n      // compileButton.style.backgroundColor = \"#2b2b2b\"\n      // compileButton.style.color = \"#a9b7c6\"\n\n      questionToolbar.style.backgroundColor = \"#2b2b2b\"\n      questionToolbar.style.color = \"#a9b7c6\"\n\n      runTestsButton.style.backgroundColor = \"#2b2b2b\"\n      runTestsButton.style.color = \"#a9b7c6\"\n\n      themeSelect.style.backgroundColor = \"#2b2b2b\"\n      themeSelect.style.color = \"#a9b7c6\"\n\n      languageSelect.style.backgroundColor = \"#2b2b2b\"\n      languageSelect.style.color = \"#a9b7c6\"\n    }\n  }\n\n  function changeLanguage(sel) {\n    var selection = sel.options[sel.selectedIndex].value\n\n    codeMirrorRef.current.updateEditorMode(selection)\n  }\n\n  return(\n      <>\n          <Toolbar />\n          <div id='top-div' className=\"top-div\">\n            <div id='top-container' className=\"top-container\">\n              <div id=\"question-toolbar\" className=\"question-toolbar\"></div>\n              <div className=\"editor-container\">\n                <div id=\"editor-toolbar\" className=\"editor-toolbar\">\n\n                  <button id=\"run-tests-button\" onClick={runTests}>Execute tests</button>\n\n                  {/* <button id=\"compile-button\" onClick={codeToLogs}>Compile and Run</button> */}\n\n                  {/* <label for=\"themes\">Theme:</label> */}\n\n                  <select name=\"themes\" id=\"themes\" onChange={e => changeTheme(e.target)}>\n                    <option value=\"darcula\">Darcula</option>\n                    <option value=\"default\">Default</option>\n                  </select>\n\n                  <select name=\"language\" id=\"language\" onChange={e => changeLanguage(e.target)}>\n                    <option value=\"text/x-java\">Java</option>\n                  </select>\n\n                </div>\n              {/* This 'editorText &&' doesn't render this component until editorText is defined in the useEffect function */}\n              {editorText && <CodeMirrorEditor ref={codeMirrorRef} code={editorText} theme={'darcula'} mode={'text/x-java'} editable={true} lineNumbers={true}/>}\n              </div>\n            </div>\n            <div id=\"response_div\" className=\"bottom-toolbar\">\n              <CodeMirrorEditor className=\"CodeMirror-full-height\" ref={executionPanelRef} code={\"\"} theme={'darcula'} mode={'text/x-java'} editable={true} lineNumbers={false}/>\n              {/* <textarea name=\"run_tests_text_area\" id=\"run_tests_text_area\" readOnly={true} className=\"tests-text-area\"></textarea> */}\n              {/* <textarea name=\"response_text_area\" id=\"response_text_area\" readOnly=\"true\" className=\"response-text-area\"></textarea> */}\n            </div>\n          </div>\n      </>\n  )\n}\n\nexport default Question;","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\Toolbar.js",["102","103"],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\QuestionsList.js",["104","105"],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\CodeMirrorEditor.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\UserLoginForm.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\SignUp.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\UserSignUpForm.js",["106"],"import React from \"react\";\nimport \"./UserSignUpForm.css\";\n\nexport default class UserSignUpForm extends React.Component {\n    async componentDidMount() {\n        //Since we are using a button outside of the form to handle the login attempt\n        //let's listen to the username and password input fields for if the user\n        //presses the enter key, and if so we can simulate a button click\n        var usernameInput = document.getElementById('username')\n        var passwordInput = document.getElementById('password')\n\n        usernameInput.addEventListener('keyup', function onEvent(e) {\n            if(e.code === \"Enter\") {\n                document.getElementById('submit-button').click()\n            }\n        })\n        passwordInput.addEventListener('keyup', function onEvent(e) {\n            if(e.code === \"Enter\") {\n                document.getElementById('submit-button').click()\n            }\n        })\n\n        //Change the size of the signup-form\n        var signUpForm = document.getElementById('signup-form')\n        var requestSuccessTextField = document.getElementById('request-success-text-field')\n\n        signUpForm.style.width = (window.innerWidth / 8) + \"px\";\n        signUpForm.style.height = (window.innerHeight / 4) + \"px\";\n        requestSuccessTextField.style.width = (window.innerWidth / 6) + \"px\";\n\n        //Move the signup-div to the center of the screen once the width and height have been rendered\n        var signUpDiv = document.getElementById('signup-div')\n\n        signUpDiv.style.marginTop = \"-\" + signUpDiv.offsetHeight / 2 + \"px\"\n        signUpDiv.style.marginLeft = \"-\" + signUpDiv.offsetWidth / 2 + \"px\"\n    }\n\n    render() {\n        function registrationHandler(username, password, email, confirmPassword) {\n            var signUpJSON = {\"username\": username, \"password\": password, \"email\": email}\n\n            //Grab the error messages\n            var noUsernameMessage = document.getElementById('no-username-message')\n            var noEmailMessage = document.getElementById('no-email-message')\n            var noPasswordMessage = document.getElementById('no-password-message')\n            var nonMatchingPasswordMessage = document.getElementById('nonmatching-password-message')\n            var usernameAlreadyTakenMessage = document.getElementById('username-already-taken-message')\n            var emailAlreadyTakenMessage = document.getElementById('email-already-taken-message')\n\n            //Reset all the error messages when the user attempts to sign up\n            noUsernameMessage.hidden = true\n            noEmailMessage.hidden = true\n            noPasswordMessage.hidden = true\n            nonMatchingPasswordMessage.hidden = true\n            usernameAlreadyTakenMessage.hidden = true\n            emailAlreadyTakenMessage.hidden = true\n\n            //Check if the username, password, or email are empty\n            if(username === \"\") {\n                noUsernameMessage.hidden = false\n                return\n            }\n            if(email === \"\") {\n                noEmailMessage.hidden = false\n                return\n            }\n            if(password === \"\") {\n                noPasswordMessage.hidden = false\n                return\n            }\n\n            //Check if the password and confirmation password match\n            if(password != confirmPassword) {\n                nonMatchingPasswordMessage.hidden = false\n                return\n            }\n            \n\n            fetch('http://localhost:8080/api/v1/registration', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(signUpJSON)\n                }).then(response => response.text().then(\n                    function (text) {\n                        if(text === \"Success\") {\n                            var requestSuccessDiv = document.getElementById('request-success-div')\n                            document.getElementById('request-success-text-field').innerHTML = \"Thank you for signing up! An email has been sent to \" + signUpJSON.email + \" with a \" +\n                                                                                              \"confirmation link to activate your account. <a href='/login'>Click here</a> to return to the login page\"\n                            document.getElementById('signup-div').hidden = true\n                            requestSuccessDiv.hidden = false\n\n                            //Move the request-success-div to the center of the screen once the width and height have been rendered\n                            requestSuccessDiv.style.marginTop = \"-\" + requestSuccessDiv.offsetHeight / 2 + \"px\"\n                            requestSuccessDiv.style.marginLeft = \"-\" + requestSuccessDiv.offsetWidth / 2 + \"px\"\n                        }\n                        if(text === \"Username taken\") {\n                            usernameAlreadyTakenMessage.hidden = false\n                        }\n                        if(text === \"Email taken\") {\n                            emailAlreadyTakenMessage.hidden = false\n                        }\n                    }\n                ))\n        }\n\n        return(\n            <>\n                <div id=\"signup-div\" className=\"signup-div\">\n                    <h1 style={{color: \"white\"}}>Sign up</h1>\n                    <div style={{height: \"50px\"}} >\n                        <b id=\"username-already-taken-message\" hidden=\"true\" style={{color: \"red\"}}>Username already taken</b>\n                        <b id=\"email-already-taken-message\" hidden=\"true\" style={{color: \"red\"}}>Email already taken</b>\n                        <b id=\"no-username-message\" hidden=\"true\" style={{color: \"red\"}}>You must enter a username</b>\n                        <b id=\"no-email-message\" hidden=\"true\" style={{color: \"red\"}}>You must enter an email</b>\n                        <b id=\"no-password-message\" hidden=\"true\" style={{color: \"red\"}}>You must enter a password</b>\n                        <b id=\"nonmatching-password-message\" hidden=\"true\" style={{color: \"red\"}}>Your passwords do not match</b>\n                    </div>\n                    <form id=\"signup-form\" className=\"signup-form\">\n                        <label for=\"username\">Username:</label><br />\n                        <div style={{height: \"20px\"}} />\n                        <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Type your username\"/><hr />\n                        <div style={{height: \"20px\"}} />\n\n                        <label for=\"email\">Email:</label><br />\n                        <div style={{height: \"20px\"}} />\n                        <input type=\"text\" id=\"email\" name=\"email\" placeholder=\"Type your email\"/><hr />\n                        <div style={{height: \"20px\"}} />\n\n                        <label for=\"password\">Password:</label><br />\n                        <div style={{height: \"20px\"}} />\n                        <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Type your password\"/><hr />\n                        <div style={{height: \"20px\"}} />\n\n                        <label for=\"confirm-password\">Confirm password:</label><br />\n                        <div style={{height: \"20px\"}} />\n                        <input type=\"password\" id=\"confirm-password\" name=\"confirm-password\" placeholder=\"Confirm your password\"/><hr />\n                    </form>\n                    <div style={{height: \"200px\"}} />\n                    <button className=\"submit-button\" id='submit-button' onClick={() => registrationHandler(window.document.getElementById('username').value, window.document.getElementById('password').value, window.document.getElementById('email').value, window.document.getElementById('confirm-password').value)}>SIGN UP</button>\n                    <div style={{height: \"100px\"}} />\n                </div>\n                <div id=\"request-success-div\" className=\"request-div\" hidden=\"true\">\n                    <p id=\"request-success-text-field\"></p>\n                </div>\n            </>\n        )\n    }\n}","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\ResetPasswordSearch.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\ResetPasswordSearchForm.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\ResetPassword.js",[],"C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\ResetPasswordForm.js",["107"],"import React from \"react\";\nimport \"./ResetPassword.css\";\n\nexport default class ResetPasswordSearchForm extends React.Component {\n    async componentDidMount() {\n        //Since we are using a button outside of the form to handle the login attempt\n        //let's listen to the username and password input fields for if the user\n        //presses the enter key, and if so we can simulate a button click\n        var passwordInput = document.getElementById('password')\n\n        passwordInput.addEventListener('keyup', function onEvent(e) {\n            if(e.code === \"Enter\") {\n                document.getElementById('submit-button').click()\n            }\n        })\n\n        //Change the size of some elements to be proportional to the screen\n        var requestForm = document.getElementById('request-form')\n        var requestSuccessTextField = document.getElementById('request-success-text-field')\n\n        requestForm.style.width = (window.innerWidth / 8) + \"px\";\n        requestForm.style.height = (window.innerHeight / 4) + \"px\";\n        requestSuccessTextField.style.width = (window.innerWidth / 6) + \"px\";\n\n        //Move the request-div to the center of the screen once the width and height have been rendered\n        var requestDiv = document.getElementById('request-div')\n\n        requestDiv.style.marginTop = \"-\" + requestDiv.offsetHeight / 2 + \"px\"\n        requestDiv.style.marginLeft = \"-\" + requestDiv.offsetWidth / 2 + \"px\"\n    }\n\n    render() {\n        function requestHandler() {\n            //Get the search params\n            const query = window.location.search\n            const urlParameters = new URLSearchParams(query)\n            const token = urlParameters.get('token')\n\n            var nonMatchingPasswordMessage = document.getElementById('nonmatching-password-message')\n            var noPasswordMessage = document.getElementById('no-password-message')\n            var password = window.document.getElementById('password').value\n            var confirmationPassword = window.document.getElementById('confirm-password').value\n            var request = {\"token\": token, \"password\": password}\n\n            //Reset when user attempts login\n            nonMatchingPasswordMessage.hidden = true\n            noPasswordMessage.hidden = true\n\n            //If the user enters nothing, do nothing\n            if(password === \"\") {\n                noPasswordMessage.hidden = false\n                return\n            }\n            //If the user enters nothing, do nothing\n            if(password != confirmationPassword) {\n                nonMatchingPasswordMessage.hidden = false\n                return\n            }\n\n            fetch('http://localhost:8080/api/v1/password-reset/confirm', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(request)\n                }).then(response => response.text().then(\n                    function (text) {\n                            var requestSuccessDiv = document.getElementById('request-success-div')\n                            document.getElementById('request-success-text-field').innerHTML = text\n                            document.getElementById('request-div').hidden = true\n                            requestSuccessDiv.hidden = false\n\n                            //Move the request-success-div to the center of the screen once the width and height have been rendered\n                            requestSuccessDiv.style.marginTop = \"-\" + requestSuccessDiv.offsetHeight / 2 + \"px\"\n                            requestSuccessDiv.style.marginLeft = \"-\" + requestSuccessDiv.offsetWidth / 2 + \"px\"\n                    }\n                ))\n        }\n\n        return(\n            <>\n            <div id=\"request-div\" className=\"request-div\">\n                <h1 style={{color: \"white\"}}>New password</h1>\n                <div id=\"nonmatching-password-message-div\" style={{height: \"100px\"}} >\n                    <b id=\"nonmatching-password-message\" hidden=\"true\" style={{color: \"red\"}}>Your passwords do not match</b>\n                    <b id=\"no-password-message\" hidden=\"true\" style={{color: \"red\"}}>You must enter a password</b>\n                </div>\n                <form id=\"request-form\" className=\"request-form\">\n                    <label for=\"password\">New password:</label><br />\n                    <div style={{height: \"20px\"}} />\n                    <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Type your password\"/><hr />\n                    <div style={{height: \"20px\"}} />\n\n                    <label for=\"confirm-password\">Confirm password:</label><br />\n                    <div style={{height: \"20px\"}} />\n                    <input type=\"password\" id=\"confirm-password\" name=\"confirm-password\" placeholder=\"Confirm your password\"/><hr />\n                </form>\n                <button className=\"submit-button\" id='submit-button' onClick={() => requestHandler()}>SUBMIT</button>\n            </div>\n            <div id=\"request-success-div\" className=\"request-div\" hidden=\"true\">\n                <p id=\"request-success-text-field\"></p>\n            </div>\n            </>\n        )\n    }\n}","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\Project.js",["108"],"import React, { useEffect } from 'react'\nimport Toolbar from './components/Toolbar'\nimport './Project.css'\n\nfunction Question() {\n  //Grab the url search params\n  const query = window.location.search\n  const urlParameters = new URLSearchParams(query)\n  const nameParameter = urlParameters.get('name')\n\n\n  //URL for making the API calls\n  var urlString = \"http://localhost:8080/api/v1/project/\" + nameParameter\n\n  //Fetch the data after the initial rendering of the page\n  //It is important to add the second argument, [], which runs this function only once after initial rendering\n  //Without the second argument, this function will run after each time the page is re-rendered\n  useEffect(() => {\n    fetch(urlString)\n      .then(response => response.json().then(function(json) {\n          document.getElementById('project-div').innerHTML = json.projectHTML\n      }));\n  }, [])\n\n  return(\n      <>\n          <Toolbar />\n          \n          <div id=\"project-div\" className='project-div'/>\n      </>\n  )\n}\n\nexport default Question;","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\UserProfile.js",["109"],"import React, { useEffect, useState } from \"react\";\nimport QuestionsList from './components/QuestionsList';\nimport Toolbar from './components/Toolbar';\nimport UserInfo from './components/UserInfo';\n\nfunction UserProfile(props) {\n    const [isValidProfile, setValidProfile] = useState()\n    var urlString = \"http://localhost:8080/api/v1/user/\" + props.postId\n\n    useEffect(() => {\n        fetch(urlString)\n            .then(response => response.json().then(function(json) {\n                if(json != null) {\n                    setValidProfile(true)\n                }\n                else {\n                    var nonexistentUserDiv = document.getElementById('nonexistent-user-div')\n                    document.getElementById('nonexistent-user-text-field').innerHTML = props.postId + \" does not exist\"\n                    nonexistentUserDiv.hidden = false\n\n                    //Move the request-success-div to the center of the screen once the width and height have been rendered\n                    nonexistentUserDiv.style.marginTop = \"-\" + nonexistentUserDiv.offsetHeight / 2 + \"px\"\n                    nonexistentUserDiv.style.marginLeft = \"-\" + nonexistentUserDiv.offsetWidth / 2 + \"px\"\n                }\n            }));\n    }, [])\n    \n    return(\n        <>\n            <Toolbar />\n            \n            <div id=\"spacer-div\" style={{height: \"50px\"}}></div>\n\n            <div id=\"user-info-div\" style={{float:\"left\", display:\"inline\", width: \"30%\"}}>\n            {isValidProfile ? <UserInfo postId={props.postId} /> : <></>}\n            </div>\n\n            <div id=\"question-list-div\" style={{float:\"left\", display:\"inline\", width: \"50%\"}}>\n            {isValidProfile ? <QuestionsList postId={props.postId} /> : <></>}\n            </div>\n\n            <div id=\"nonexistent-user-div\" className=\"request-div\" hidden=\"true\">\n                <p id=\"nonexistent-user-text-field\"></p>\n            </div>\n        </>\n    )\n}\n\nexport default UserProfile;","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\components\\UserInfo.js",["110","111"],"import React, { useEffect } from \"react\";\n\nfunction UserInfo(props) {\n    var username = null\n    var localUsername = localStorage.getItem('username')\n    var sessionUsername = sessionStorage.getItem('username')\n    var urlString = \"http://localhost:8080/api/v1/user/\" + props.postId\n    var allQuestionsUrlString = \"http://localhost:8080/api/v1/question\"\n    var ctx\n    var chartColors = [\"green\", \"yellow\", \"grey\"]\n\n    function createChart(cx, cy, radius, arcwidth, values, colors) {\n        var tot = 0;\n        var accum = 0;\n        var PI = Math.PI;\n        var offset = -PI;\n        ctx.lineWidth = arcwidth;\n\n        for(var i=0; i < values.length; i++)\n            tot += values[i]\n\n\n        for(var i=0; i < values.length; i++){\n            ctx.beginPath()\n            ctx.arc(cx,cy,radius,\n                offset+PI*(accum/tot),\n                offset+PI*((accum+values[i])/tot)\n            )\n            ctx.strokeStyle = colors[i]\n            ctx.stroke()\n            accum += values[i]\n        }\n    }\n\n    if(localUsername != null) {\n        username = localUsername\n    }\n    if(sessionUsername != null) {\n        username = sessionUsername\n    }\n\n    useEffect(() => {\n        var total\n\n        fetch(allQuestionsUrlString)\n            .then(response => response.json().then(function(json) {\n                total = json.length\n        }));\n\n\n        fetch(urlString)\n            .then(response => response.json().then(function(json) {\n                if(username === json.username)\n                    document.getElementById('edit-button').hidden = false\n\n                var questionsCompleted = json.questionsCompleted.length\n                var questionsAttempted = json.questionsAttempted.length - questionsCompleted\n                var questionsUnattempted = total - questionsAttempted - questionsCompleted\n                var chartValues = [questionsCompleted, questionsAttempted, questionsUnattempted]\n\n                document.getElementById('completed-label').innerHTML = \"Questions completed: \" + questionsCompleted + \"/\" + total\n                document.getElementById('attempted-label').innerHTML = \"Questions attempted: \" + questionsAttempted + \"/\" + total\n                document.getElementById('unattempted-label').innerHTML = \"Questions unattempted: \" + questionsUnattempted + \"/\" + total\n\n                ctx = document.getElementById('canvas').getContext('2d')\n                createChart(100, 100, 80, 18, chartValues, chartColors)\n            }));\n    }, [])\n\n    return (\n        <>\n            <div style={{backgroundColor: \"#282c34\", color: \"white\", marginLeft: \"20%\", width:\"100%\", display: \"flex\", flexDirection: \"column\"}}>\n                <div>\n                    <h1 style={{float: \"left\", marginLeft: \"3%\"}}>{props.postId}</h1>\n                    <button id=\"edit-button\" hidden=\"true\" style={{float:\"right\", margin:\"10px\"}}>Edit profile</button>\n                </div>\n                <div>\n                    <canvas id=\"canvas\" style={{float: \"left\", marginLeft: \"3%\"}}></canvas>\n                    <div style={{display: \"grid\", float: \"left\", marginTop:\"3%\"}}>\n                        <label id=\"completed-label\" style={{color: \"green\"}} for=\"canvas\"></label>\n                        <div id=\"spacer\" style={{height: \"5px\"}}></div>\n                        <label id=\"attempted-label\" style={{color: \"yellow\"}} for=\"canvas\"></label>\n                        <div id=\"spacer\" style={{height: \"5px\"}}></div>\n                        <label id=\"unattempted-label\" style={{color: \"grey\"}} for=\"canvas\"></label>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default UserInfo;","C:\\Users\\Zacha\\Desktop\\opencode-frontend\\src\\About.js",["112","113","114"],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":16,"column":7,"nodeType":"121","messageId":"122","endLine":16,"endColumn":26},{"ruleId":"123","severity":1,"message":"124","line":39,"column":6,"nodeType":"125","endLine":39,"endColumn":8,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"127","line":43,"column":12,"nodeType":"121","messageId":"122","endLine":43,"endColumn":32},{"ruleId":"128","severity":1,"message":"129","line":33,"column":13,"nodeType":"130","endLine":33,"endColumn":33},{"ruleId":"131","severity":1,"message":"132","line":37,"column":66,"nodeType":"130","endLine":37,"endColumn":93},{"ruleId":"133","severity":1,"message":"134","line":74,"column":40,"nodeType":"135","messageId":"136","endLine":74,"endColumn":42},{"ruleId":"137","severity":1,"message":"138","line":81,"column":17,"nodeType":"121","messageId":"139","endLine":81,"endColumn":18},{"ruleId":"133","severity":1,"message":"134","line":73,"column":25,"nodeType":"135","messageId":"136","endLine":73,"endColumn":27},{"ruleId":"133","severity":1,"message":"134","line":55,"column":25,"nodeType":"135","messageId":"136","endLine":55,"endColumn":27},{"ruleId":"123","severity":1,"message":"124","line":23,"column":6,"nodeType":"125","endLine":23,"endColumn":8,"suggestions":"140"},{"ruleId":"123","severity":1,"message":"141","line":26,"column":8,"nodeType":"125","endLine":26,"endColumn":10,"suggestions":"142"},{"ruleId":"137","severity":1,"message":"138","line":23,"column":17,"nodeType":"121","messageId":"139","endLine":23,"endColumn":18},{"ruleId":"123","severity":1,"message":"143","line":65,"column":23,"nodeType":"144","endLine":65,"endColumn":73},{"ruleId":"131","severity":1,"message":"132","line":14,"column":17,"nodeType":"130","endLine":14,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":15,"column":17,"nodeType":"130","endLine":15,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":16,"column":17,"nodeType":"130","endLine":16,"endColumn":20},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'run_tests_text_area' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'urlString'. Either include it or remove the dependency array.","ArrayExpression",["147"],"'executeCorrectAnswer' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","redeclared",["148"],"React Hook useEffect has missing dependencies: 'props.postId' and 'urlString'. Either include them or remove the dependency array.",["149"],"Assignments to the 'ctx' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},{"desc":"150","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [urlString]",{"range":"155","text":"156"},{"range":"157","text":"156"},"Update the dependencies array to be: [props.postId, urlString]",{"range":"158","text":"159"},[1440,1442],"[urlString]",[874,876],[1238,1240],"[props.postId, urlString]"]